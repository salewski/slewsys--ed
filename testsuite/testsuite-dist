#! /bin/sh
# Generated from testsuite.at by GNU Autoconf 2.69.
#
# Copyright (C) 2009-2012 Free Software Foundation, Inc.
#
# This test suite is free software; the Free Software Foundation gives
# unlimited permission to copy, distribute and modify it.
## -------------------- ##
## M4sh Initialization. ##
## -------------------- ##

# Be more Bourne compatible
DUALCASE=1; export DUALCASE # for MKS sh
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi


as_nl='
'
export as_nl
# Printing a long string crashes Solaris 7 /usr/bin/printf.
as_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo
as_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo
# Prefer a ksh shell builtin over an external printf program on Solaris,
# but without wasting forks for bash or zsh.
if test -z "$BASH_VERSION$ZSH_VERSION" \
    && (test "X`print -r -- $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='print -r --'
  as_echo_n='print -rn --'
elif (test "X`printf %s $as_echo`" = "X$as_echo") 2>/dev/null; then
  as_echo='printf %s\n'
  as_echo_n='printf %s'
else
  if test "X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`" = "X-n $as_echo"; then
    as_echo_body='eval /usr/ucb/echo -n "$1$as_nl"'
    as_echo_n='/usr/ucb/echo -n'
  else
    as_echo_body='eval expr "X$1" : "X\\(.*\\)"'
    as_echo_n_body='eval
      arg=$1;
      case $arg in #(
      *"$as_nl"*)
	expr "X$arg" : "X\\(.*\\)$as_nl";
	arg=`expr "X$arg" : ".*$as_nl\\(.*\\)"`;;
      esac;
      expr "X$arg" : "X\\(.*\\)" | tr -d "$as_nl"
    '
    export as_echo_n_body
    as_echo_n='sh -c $as_echo_n_body as_echo'
  fi
  export as_echo_body
  as_echo='sh -c $as_echo_body as_echo'
fi

# The user is always right.
if test "${PATH_SEPARATOR+set}" != set; then
  PATH_SEPARATOR=:
  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {
    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||
      PATH_SEPARATOR=';'
  }
fi


# IFS
# We need space, tab and new line, in precisely that order.  Quoting is
# there to prevent editors from complaining about space-tab.
# (If _AS_PATH_WALK were called with IFS unset, it would disable word
# splitting by setting IFS to empty value.)
IFS=" ""	$as_nl"

# Find who we are.  Look in the path if we contain no directory separator.
as_myself=
case $0 in #((
  *[\\/]* ) as_myself=$0 ;;
  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
  done
IFS=$as_save_IFS

     ;;
esac
# We did not find ourselves, most probably we were run as `sh COMMAND'
# in which case we are not to be found in the path.
if test "x$as_myself" = x; then
  as_myself=$0
fi
if test ! -f "$as_myself"; then
  $as_echo "$as_myself: error: cannot find myself; rerun with an absolute file name" >&2
  exit 1
fi

# Unset variables that we do not need and which cause bugs (e.g. in
# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the "|| exit 1"
# suppresses any "Segmentation fault" message there.  '((' could
# trigger a bug in pdksh 5.2.14.
for as_var in BASH_ENV ENV MAIL MAILPATH
do eval test x\${$as_var+set} = xset \
  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :
done
PS1='$ '
PS2='> '
PS4='+ '

# NLS nuisances.
LC_ALL=C
export LC_ALL
LANGUAGE=C
export LANGUAGE

# CDPATH.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

if test "x$CONFIG_SHELL" = x; then
  as_bourne_compatible="if test -n \"\${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :
  emulate sh
  NULLCMD=:
  # Pre-4.2 versions of Zsh do word splitting on \${1+\"\$@\"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '\${1+\"\$@\"}'='\"\$@\"'
  setopt NO_GLOB_SUBST
else
  case \`(set -o) 2>/dev/null\` in #(
  *posix*) :
    set -o posix ;; #(
  *) :
     ;;
esac
fi
"
  as_required="as_fn_return () { (exit \$1); }
as_fn_success () { as_fn_return 0; }
as_fn_failure () { as_fn_return 1; }
as_fn_ret_success () { return 0; }
as_fn_ret_failure () { return 1; }

exitcode=0
as_fn_success || { exitcode=1; echo as_fn_success failed.; }
as_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }
as_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }
as_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }
if ( set x; as_fn_ret_success y && test x = \"\$1\" ); then :

else
  exitcode=1; echo positional parameters were not saved.
fi
test x\$exitcode = x0 || exit 1
test -x / || exit 1"
  as_suggested="  as_lineno_1=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_1a=\$LINENO
  as_lineno_2=";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested" as_lineno_2a=\$LINENO
  eval 'test \"x\$as_lineno_1'\$as_run'\" != \"x\$as_lineno_2'\$as_run'\" &&
  test \"x\`expr \$as_lineno_1'\$as_run' + 1\`\" = \"x\$as_lineno_2'\$as_run'\"' || exit 1
test \$(( 1 + 1 )) = 2 || exit 1"
  if (eval "$as_required") 2>/dev/null; then :
  as_have_required=yes
else
  as_have_required=no
fi
  if test x$as_have_required = xyes && (eval "$as_suggested") 2>/dev/null; then :

else
  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
as_found=false
for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
  as_found=:
  case $as_dir in #(
	 /*)
	   for as_base in sh bash ksh sh5; do
	     # Try only shells that exist, to save several forks.
	     as_shell=$as_dir/$as_base
	     if { test -f "$as_shell" || test -f "$as_shell.exe"; } &&
		    { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$as_shell"; } 2>/dev/null; then :
  CONFIG_SHELL=$as_shell as_have_required=yes
		   if { $as_echo "$as_bourne_compatible""$as_suggested" | as_run=a "$as_shell"; } 2>/dev/null; then :
  break 2
fi
fi
	   done;;
       esac
  as_found=false
done
$as_found || { if { test -f "$SHELL" || test -f "$SHELL.exe"; } &&
	      { $as_echo "$as_bourne_compatible""$as_required" | as_run=a "$SHELL"; } 2>/dev/null; then :
  CONFIG_SHELL=$SHELL as_have_required=yes
fi; }
IFS=$as_save_IFS


      if test "x$CONFIG_SHELL" != x; then :
  export CONFIG_SHELL
             # We cannot yet assume a decent shell, so we have to provide a
# neutralization value for shells without unset; and this also
# works around shells that cannot unset nonexistent variables.
# Preserve -v and -x to the replacement shell.
BASH_ENV=/dev/null
ENV=/dev/null
(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV
case $- in # ((((
  *v*x* | *x*v* ) as_opts=-vx ;;
  *v* ) as_opts=-v ;;
  *x* ) as_opts=-x ;;
  * ) as_opts= ;;
esac
exec $CONFIG_SHELL $as_opts "$as_myself" ${1+"$@"}
# Admittedly, this is quite paranoid, since all the known shells bail
# out after a failed `exec'.
$as_echo "$0: could not re-execute with $CONFIG_SHELL" >&2
exit 255
fi

    if test x$as_have_required = xno; then :
  $as_echo "$0: This script requires a shell more modern than all"
  $as_echo "$0: the shells that I found on your system."
  if test x${ZSH_VERSION+set} = xset ; then
    $as_echo "$0: In particular, zsh $ZSH_VERSION has bugs and should"
    $as_echo "$0: be upgraded to zsh 4.3.4 or later."
  else
    $as_echo "$0: Please tell bug-autoconf@gnu.org about your system,
$0: including any error possibly output before this
$0: message. Then install a modern shell, or manually run
$0: the script under such a shell if you do have one."
  fi
  exit 1
fi
fi
fi
SHELL=${CONFIG_SHELL-/bin/sh}
export SHELL
# Unset more variables known to interfere with behavior of common tools.
CLICOLOR_FORCE= GREP_OPTIONS=
unset CLICOLOR_FORCE GREP_OPTIONS

## --------------------- ##
## M4sh Shell Functions. ##
## --------------------- ##
# as_fn_unset VAR
# ---------------
# Portably unset VAR.
as_fn_unset ()
{
  { eval $1=; unset $1;}
}
as_unset=as_fn_unset

# as_fn_set_status STATUS
# -----------------------
# Set $? to STATUS, without forking.
as_fn_set_status ()
{
  return $1
} # as_fn_set_status

# as_fn_exit STATUS
# -----------------
# Exit the shell with STATUS, even in a "trap 0" or "set -e" context.
as_fn_exit ()
{
  set +e
  as_fn_set_status $1
  exit $1
} # as_fn_exit

# as_fn_mkdir_p
# -------------
# Create "$as_dir" as a directory, including parents if necessary.
as_fn_mkdir_p ()
{

  case $as_dir in #(
  -*) as_dir=./$as_dir;;
  esac
  test -d "$as_dir" || eval $as_mkdir_p || {
    as_dirs=
    while :; do
      case $as_dir in #(
      *\'*) as_qdir=`$as_echo "$as_dir" | sed "s/'/'\\\\\\\\''/g"`;; #'(
      *) as_qdir=$as_dir;;
      esac
      as_dirs="'$as_qdir' $as_dirs"
      as_dir=`$as_dirname -- "$as_dir" ||
$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
	 X"$as_dir" : 'X\(//\)[^/]' \| \
	 X"$as_dir" : 'X\(//\)$' \| \
	 X"$as_dir" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X"$as_dir" |
    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)[^/].*/{
	    s//\1/
	    q
	  }
	  /^X\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`
      test -d "$as_dir" && break
    done
    test -z "$as_dirs" || eval "mkdir $as_dirs"
  } || test -d "$as_dir" || as_fn_error $? "cannot create directory $as_dir"


} # as_fn_mkdir_p

# as_fn_executable_p FILE
# -----------------------
# Test if FILE is an executable regular file.
as_fn_executable_p ()
{
  test -f "$1" && test -x "$1"
} # as_fn_executable_p
# as_fn_append VAR VALUE
# ----------------------
# Append the text in VALUE to the end of the definition contained in VAR. Take
# advantage of any shell optimizations that allow amortized linear growth over
# repeated appends, instead of the typical quadratic growth present in naive
# implementations.
if (eval "as_var=1; as_var+=2; test x\$as_var = x12") 2>/dev/null; then :
  eval 'as_fn_append ()
  {
    eval $1+=\$2
  }'
else
  as_fn_append ()
  {
    eval $1=\$$1\$2
  }
fi # as_fn_append

# as_fn_arith ARG...
# ------------------
# Perform arithmetic evaluation on the ARGs, and store the result in the
# global $as_val. Take advantage of shells that can avoid forks. The arguments
# must be portable across $(()) and expr.
if (eval "test \$(( 1 + 1 )) = 2") 2>/dev/null; then :
  eval 'as_fn_arith ()
  {
    as_val=$(( $* ))
  }'
else
  as_fn_arith ()
  {
    as_val=`expr "$@" || test $? -eq 1`
  }
fi # as_fn_arith


# as_fn_error STATUS ERROR [LINENO LOG_FD]
# ----------------------------------------
# Output "`basename $0`: error: ERROR" to stderr. If LINENO and LOG_FD are
# provided, also output the error to LOG_FD, referencing LINENO. Then exit the
# script with STATUS, using 1 if that was 0.
as_fn_error ()
{
  as_status=$1; test $as_status -eq 0 && as_status=1
  if test "$4"; then
    as_lineno=${as_lineno-"$3"} as_lineno_stack=as_lineno_stack=$as_lineno_stack
    $as_echo "$as_me:${as_lineno-$LINENO}: error: $2" >&$4
  fi
  $as_echo "$as_me: error: $2" >&2
  as_fn_exit $as_status
} # as_fn_error

if expr a : '\(a\)' >/dev/null 2>&1 &&
   test "X`expr 00001 : '.*\(...\)'`" = X001; then
  as_expr=expr
else
  as_expr=false
fi

if (basename -- /) >/dev/null 2>&1 && test "X`basename -- / 2>&1`" = "X/"; then
  as_basename=basename
else
  as_basename=false
fi

as_me=`$as_basename -- "$0" ||
$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
	 X"$0" : 'X\(//\)$' \| \
	 X"$0" : 'X\(/\)' \| . 2>/dev/null ||
$as_echo X/"$0" |
    sed '/^.*\/\([^/][^/]*\)\/*$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\/\)$/{
	    s//\1/
	    q
	  }
	  /^X\/\(\/\).*/{
	    s//\1/
	    q
	  }
	  s/.*/./; q'`

if (as_dir=`dirname -- /` && test "X$as_dir" = X/) >/dev/null 2>&1; then
  as_dirname=dirname
else
  as_dirname=false
fi

# Avoid depending upon Character Ranges.
as_cr_letters='abcdefghijklmnopqrstuvwxyz'
as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
as_cr_Letters=$as_cr_letters$as_cr_LETTERS
as_cr_digits='0123456789'
as_cr_alnum=$as_cr_Letters$as_cr_digits


  as_lineno_1=$LINENO as_lineno_1a=$LINENO
  as_lineno_2=$LINENO as_lineno_2a=$LINENO
  eval 'test "x$as_lineno_1'$as_run'" != "x$as_lineno_2'$as_run'" &&
  test "x`expr $as_lineno_1'$as_run' + 1`" = "x$as_lineno_2'$as_run'"' || {
  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)
  sed -n '
    p
    /[$]LINENO/=
  ' <$as_myself |
    sed '
      s/[$]LINENO.*/&-/
      t lineno
      b
      :lineno
      N
      :loop
      s/[$]LINENO\([^'$as_cr_alnum'_].*\n\)\(.*\)/\2\1\2/
      t loop
      s/-\n.*//
    ' >$as_me.lineno &&
  chmod +x "$as_me.lineno" ||
    { $as_echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2; as_fn_exit 1; }

  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have
  # already done that, so ensure we don't try to do so again and fall
  # in an infinite loop.  This has already happened in practice.
  _as_can_reexec=no; export _as_can_reexec
  # Don't try to exec as it changes $[0], causing all sort of problems
  # (the dirname of $[0] is not the place where we might find the
  # original and so on.  Autoconf is especially sensitive to this).
  . "./$as_me.lineno"
  # Exit status is that of the last command.
  exit
}

ECHO_C= ECHO_N= ECHO_T=
case `echo -n x` in #(((((
-n*)
  case `echo 'xy\c'` in
  *c*) ECHO_T='	';;	# ECHO_T is single tab character.
  xy)  ECHO_C='\c';;
  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null
       ECHO_T='	';;
  esac;;
*)
  ECHO_N='-n';;
esac

rm -f conf$$ conf$$.exe conf$$.file
if test -d conf$$.dir; then
  rm -f conf$$.dir/conf$$.file
else
  rm -f conf$$.dir
  mkdir conf$$.dir 2>/dev/null
fi
if (echo >conf$$.file) 2>/dev/null; then
  if ln -s conf$$.file conf$$ 2>/dev/null; then
    as_ln_s='ln -s'
    # ... but there are two gotchas:
    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.
    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.
    # In both cases, we have to default to `cp -pR'.
    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||
      as_ln_s='cp -pR'
  elif ln conf$$.file conf$$ 2>/dev/null; then
    as_ln_s=ln
  else
    as_ln_s='cp -pR'
  fi
else
  as_ln_s='cp -pR'
fi
rm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file
rmdir conf$$.dir 2>/dev/null

if mkdir -p . 2>/dev/null; then
  as_mkdir_p='mkdir -p "$as_dir"'
else
  test -d ./-p && rmdir ./-p
  as_mkdir_p=false
fi

as_test_x='test -x'
as_executable_p=as_fn_executable_p

# Sed expression to map a string onto a valid CPP name.
as_tr_cpp="eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'"

# Sed expression to map a string onto a valid variable name.
as_tr_sh="eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'"





SHELL=${CONFIG_SHELL-/bin/sh}

# How were we run?
at_cli_args="$@"


# Not all shells have the 'times' builtin; the subshell is needed to make
# sure we discard the 'times: not found' message from the shell.
at_times_p=false
(times) >/dev/null 2>&1 && at_times_p=:

# CLI Arguments to pass to the debugging scripts.
at_debug_args=
# -e sets to true
at_errexit_p=false
# Shall we be verbose?  ':' means no, empty means yes.
at_verbose=:
at_quiet=
# Running several jobs in parallel, 0 means as many as test groups.
at_jobs=1
at_traceon=:
at_trace_echo=:
at_check_filter_trace=:

# Shall we keep the debug scripts?  Must be `:' when the suite is
# run by a debug script, so that the script doesn't remove itself.
at_debug_p=false
# Display help message?
at_help_p=false
# Display the version message?
at_version_p=false
# List test groups?
at_list_p=false
# --clean
at_clean=false
# Test groups to run
at_groups=
# Whether to rerun failed tests.
at_recheck=
# Whether a write failure occurred
at_write_fail=0

# The directory we run the suite in.  Default to . if no -C option.
at_dir=`pwd`
# An absolute reference to this testsuite script.
case $as_myself in
  [\\/]* | ?:[\\/]* ) at_myself=$as_myself ;;
  * ) at_myself=$at_dir/$as_myself ;;
esac
# Whether -C is in effect.
at_change_dir=false

# Whether to enable colored test results.
at_color=no
# List of the tested programs.
at_tested='ed'
# As many question marks as there are digits in the last test group number.
# Used to normalize the test group numbers so that `ls' lists them in
# numerical order.
at_format='???'
# Description of all the test groups.
at_help_all="1;a.ok-at:7;Script: a.t;;
2;addr.ok-at:7;Script: addr.t;;
3;ascii.ok-at:7;Script: ascii.t;;
4;bang1.ok-at:7;Script: bang1.t;;
5;c1.ok-at:7;Script: c1.t;;
6;c2.ok-at:7;Script: c2.t;;
7;comment.ok-at:7;Script: comment.t;;
8;d.ok-at:7;Script: d.t;;
9;e1.ok-at:7;Script: e1.t;;
10;e2.ok-at:7;Script: e2.t;;
11;e3.ok-at:7;Script: e3.t;;
12;e4.ok-at:7;Script: e4.t;;
13;e5.ok-at:7;Script: e5.t;;
14;g1.ok-at:7;Script: g1.t;;
15;g2.ok-at:7;Script: g2.t;;
16;g3.ok-at:7;Script: g3.t;;
17;g4.ok-at:7;Script: g4.t;;
18;g5.ok-at:7;Script: g5.t;;
19;i1.ok-at:7;Script: i1.t;;
20;i2.ok-at:7;Script: i2.t;;
21;j.ok-at:7;Script: j.t;;
22;k.ok-at:7;Script: k.t;;
23;l.ok-at:7;Script: l.t;;
24;m.ok-at:7;Script: m.t;;
25;n.ok-at:7;Script: n.t;;
26;nl1.ok-at:7;Script: nl1.t;;
27;nl2.ok-at:7;Script: nl2.t;;
28;nl3.ok-at:7;Script: nl3.t;;
29;nl4.ok-at:7;Script: nl4.t;;
30;p.ok-at:7;Script: p.t;;
31;q2.ok-at:7;Script: q2.t;;
32;r1.ok-at:7;Script: r1.t;;
33;r2.ok-at:7;Script: r2.t;;
34;r3.ok-at:7;Script: r3.t;;
35;s1.ok-at:7;Script: s1.t;;
36;s2.ok-at:7;Script: s2.t;;
37;s3.ok-at:7;Script: s3.t;;
38;s4.ok-at:7;Script: s4.t;;
39;s5.ok-at:7;Script: s5.t;;
40;s6.ok-at:7;Script: s6.t;;
41;t1.ok-at:7;Script: t1.t;;
42;t2.ok-at:7;Script: t2.t;;
43;u.ok-at:7;Script: u.t;;
44;v.ok-at:7;Script: v.t;;
45;w.ok-at:7;Script: w.t;;
46;a2.err-at:7;Pipe: a2.err;;
47;addr1.err-at:7;Pipe: addr1.err;;
48;addr2.err-at:7;Pipe: addr2.err;;
49;bang1.err-at:7;Pipe: bang1.err;;
50;c1.err-at:7;Pipe: c1.err;;
51;d.err-at:7;Pipe: d.err;;
52;e1.err-at:7;Pipe: e1.err;;
53;e2.err-at:7;Pipe: e2.err;;
54;e3.err-at:7;Pipe: e3.err;;
55;f1.err-at:7;Pipe: f1.err;;
56;f2.err-at:7;Pipe: f2.err;;
57;g1.err-at:7;Pipe: g1.err;;
58;g2.err-at:7;Pipe: g2.err;;
59;g3.err-at:7;Pipe: g3.err;;
60;h.err-at:7;Pipe: h.err;;
61;i2.err-at:7;Pipe: i2.err;;
62;k2.err-at:7;Pipe: k2.err;;
63;k3.err-at:7;Pipe: k3.err;;
64;k4.err-at:7;Pipe: k4.err;;
65;m.err-at:7;Pipe: m.err;;
66;q1.err-at:7;Pipe: q1.err;;
67;r2.err-at:7;Pipe: r2.err;;
68;s1.err-at:7;Pipe: s1.err;;
69;s10.err-at:7;Pipe: s10.err;;
70;s3.err-at:7;Pipe: s3.err;;
71;s4.err-at:7;Pipe: s4.err;;
72;s5.err-at:7;Pipe: s5.err;;
73;s6.err-at:7;Pipe: s6.err;;
74;s7.err-at:7;Pipe: s7.err;;
75;s8.err-at:7;Pipe: s8.err;;
76;t1.err-at:7;Pipe: t1.err;;
77;t2.err-at:7;Pipe: t2.err;;
78;u.err-at:7;Pipe: u.err;;
79;w1.err-at:7;Pipe: w1.err;;
80;w2.err-at:7;Pipe: w2.err;;
81;w3.err-at:7;Pipe: w3.err;;
82;z.err-at:7;Pipe: z.err;;
83;a2.fail-at:7;Fail: a2.err;;
84;addr1.fail-at:7;Fail: addr1.err;;
85;addr2.fail-at:7;Fail: addr2.err;;
86;bang1.fail-at:7;Fail: bang1.err;;
87;c1.fail-at:7;Fail: c1.err;;
88;d.fail-at:7;Fail: d.err;;
89;e1.fail-at:7;Fail: e1.err;;
90;e2.fail-at:7;Fail: e2.err;;
91;e3.fail-at:7;Fail: e3.err;;
92;f1.fail-at:7;Fail: f1.err;;
93;f2.fail-at:7;Fail: f2.err;;
94;g1.fail-at:7;Fail: g1.err;;
95;g2.fail-at:7;Fail: g2.err;;
96;g3.fail-at:7;Fail: g3.err;;
97;h.fail-at:7;Fail: h.err;;
98;i2.fail-at:7;Fail: i2.err;;
99;k2.fail-at:7;Fail: k2.err;;
100;k3.fail-at:7;Fail: k3.err;;
101;k4.fail-at:7;Fail: k4.err;;
102;m.fail-at:7;Fail: m.err;;
103;q1.fail-at:7;Fail: q1.err;;
104;r2.fail-at:7;Fail: r2.err;;
105;s1.fail-at:7;Fail: s1.err;;
106;s10.fail-at:7;Fail: s10.err;;
107;s3.fail-at:7;Fail: s3.err;;
108;s4.fail-at:7;Fail: s4.err;;
109;s5.fail-at:7;Fail: s5.err;;
110;s6.fail-at:7;Fail: s6.err;;
111;s7.fail-at:7;Fail: s7.err;;
112;s8.fail-at:7;Fail: s8.err;;
113;t1.fail-at:7;Fail: t1.err;;
114;t2.fail-at:7;Fail: t2.err;;
115;u.fail-at:7;Fail: u.err;;
116;w1.fail-at:7;Fail: w1.err;;
117;w2.fail-at:7;Fail: w2.err;;
118;w3.fail-at:7;Fail: w3.err;;
119;z.fail-at:7;Fail: z.err;;
"
# List of the all the test groups.
at_groups_all=`$as_echo "$at_help_all" | sed 's/;.*//'`

# at_fn_validate_ranges NAME...
# -----------------------------
# Validate and normalize the test group number contained in each variable
# NAME. Leading zeroes are treated as decimal.
at_fn_validate_ranges ()
{
  for at_grp
  do
    eval at_value=\$$at_grp
    if test $at_value -lt 1 || test $at_value -gt 119; then
      $as_echo "invalid test group: $at_value" >&2
      exit 1
    fi
    case $at_value in
      0*) # We want to treat leading 0 as decimal, like expr and test, but
	  # AS_VAR_ARITH treats it as octal if it uses $(( )).
	  # With XSI shells, ${at_value#${at_value%%[1-9]*}} avoids the
	  # expr fork, but it is not worth the effort to determine if the
	  # shell supports XSI when the user can just avoid leading 0.
	  eval $at_grp='`expr $at_value + 0`' ;;
    esac
  done
}

at_prev=
for at_option
do
  # If the previous option needs an argument, assign it.
  if test -n "$at_prev"; then
    at_option=$at_prev=$at_option
    at_prev=
  fi

  case $at_option in
  *=?*) at_optarg=`expr "X$at_option" : '[^=]*=\(.*\)'` ;;
  *)    at_optarg= ;;
  esac

  # Accept the important Cygnus configure options, so we can diagnose typos.

  case $at_option in
    --help | -h )
	at_help_p=:
	;;

    --list | -l )
	at_list_p=:
	;;

    --version | -V )
	at_version_p=:
	;;

    --clean | -c )
	at_clean=:
	;;

    --color )
	at_color=always
	;;
    --color=* )
	case $at_optarg in
	no | never | none) at_color=never ;;
	auto | tty | if-tty) at_color=auto ;;
	always | yes | force) at_color=always ;;
	*) at_optname=`echo " $at_option" | sed 's/^ //; s/=.*//'`
	   as_fn_error $? "unrecognized argument to $at_optname: $at_optarg" ;;
	esac
	;;

    --debug | -d )
	at_debug_p=:
	;;

    --errexit | -e )
	at_debug_p=:
	at_errexit_p=:
	;;

    --verbose | -v )
	at_verbose=; at_quiet=:
	;;

    --trace | -x )
	at_traceon='set -x'
	at_trace_echo=echo
	at_check_filter_trace=at_fn_filter_trace
	;;

    [0-9] | [0-9][0-9] | [0-9][0-9][0-9] | [0-9][0-9][0-9][0-9])
	at_fn_validate_ranges at_option
	as_fn_append at_groups "$at_option$as_nl"
	;;

    # Ranges
    [0-9]- | [0-9][0-9]- | [0-9][0-9][0-9]- | [0-9][0-9][0-9][0-9]-)
	at_range_start=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_start
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,$p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    -[0-9] | -[0-9][0-9] | -[0-9][0-9][0-9] | -[0-9][0-9][0-9][0-9])
	at_range_end=`echo $at_option |tr -d X-`
	at_fn_validate_ranges at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '1,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    [0-9]-[0-9] | [0-9]-[0-9][0-9] | [0-9]-[0-9][0-9][0-9] | \
    [0-9]-[0-9][0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9] | \
    [0-9][0-9]-[0-9][0-9][0-9] | [0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9] | \
    [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] | \
    [0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9] )
	at_range_start=`expr $at_option : '\(.*\)-'`
	at_range_end=`expr $at_option : '.*-\(.*\)'`
	if test $at_range_start -gt $at_range_end; then
	  at_tmp=$at_range_end
	  at_range_end=$at_range_start
	  at_range_start=$at_tmp
	fi
	at_fn_validate_ranges at_range_start at_range_end
	at_range=`$as_echo "$at_groups_all" | \
	  sed -ne '/^'$at_range_start'$/,/^'$at_range_end'$/p'`
	as_fn_append at_groups "$at_range$as_nl"
	;;

    # Directory selection.
    --directory | -C )
	at_prev=--directory
	;;
    --directory=* )
	at_change_dir=:
	at_dir=$at_optarg
	if test x- = "x$at_dir" ; then
	  at_dir=./-
	fi
	;;

    # Parallel execution.
    --jobs | -j )
	at_jobs=0
	;;
    --jobs=* | -j[0-9]* )
	if test -n "$at_optarg"; then
	  at_jobs=$at_optarg
	else
	  at_jobs=`expr X$at_option : 'X-j\(.*\)'`
	fi
	case $at_jobs in *[!0-9]*)
	  at_optname=`echo " $at_option" | sed 's/^ //; s/[0-9=].*//'`
	  as_fn_error $? "non-numeric argument to $at_optname: $at_jobs" ;;
	esac
	;;

    # Keywords.
    --keywords | -k )
	at_prev=--keywords
	;;
    --keywords=* )
	at_groups_selected=$at_help_all
	at_save_IFS=$IFS
	IFS=,
	set X $at_optarg
	shift
	IFS=$at_save_IFS
	for at_keyword
	do
	  at_invert=
	  case $at_keyword in
	  '!'*)
	    at_invert="-v"
	    at_keyword=`expr "X$at_keyword" : 'X!\(.*\)'`
	    ;;
	  esac
	  # It is on purpose that we match the test group titles too.
	  at_groups_selected=`$as_echo "$at_groups_selected" |
	      grep -i $at_invert "^[1-9][^;]*;.*[; ]$at_keyword[ ;]"`
	done
	# Smash the keywords.
	at_groups_selected=`$as_echo "$at_groups_selected" | sed 's/;.*//'`
	as_fn_append at_groups "$at_groups_selected$as_nl"
	;;
    --recheck)
	at_recheck=:
	;;

    *=*)
	at_envvar=`expr "x$at_option" : 'x\([^=]*\)='`
	# Reject names that are not valid shell variable names.
	case $at_envvar in
	  '' | [0-9]* | *[!_$as_cr_alnum]* )
	    as_fn_error $? "invalid variable name: \`$at_envvar'" ;;
	esac
	at_value=`$as_echo "$at_optarg" | sed "s/'/'\\\\\\\\''/g"`
	# Export now, but save eval for later and for debug scripts.
	export $at_envvar
	as_fn_append at_debug_args " $at_envvar='$at_value'"
	;;

     *) $as_echo "$as_me: invalid option: $at_option" >&2
	$as_echo "Try \`$0 --help' for more information." >&2
	exit 1
	;;
  esac
done

# Verify our last option didn't require an argument
if test -n "$at_prev"; then :
  as_fn_error $? "\`$at_prev' requires an argument"
fi

# The file containing the suite.
at_suite_log=$at_dir/$as_me.log

# Selected test groups.
if test -z "$at_groups$at_recheck"; then
  at_groups=$at_groups_all
else
  if test -n "$at_recheck" && test -r "$at_suite_log"; then
    at_oldfails=`sed -n '
      /^Failed tests:$/,/^Skipped tests:$/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^Unexpected passes:$/,/^## Detailed failed tests/{
	s/^[ ]*\([1-9][0-9]*\):.*/\1/p
      }
      /^## Detailed failed tests/q
      ' "$at_suite_log"`
    as_fn_append at_groups "$at_oldfails$as_nl"
  fi
  # Sort the tests, removing duplicates.
  at_groups=`$as_echo "$at_groups" | sort -nu | sed '/^$/d'`
fi

if test x"$at_color" = xalways \
   || { test x"$at_color" = xauto && test -t 1; }; then
  at_red=`printf '\033[0;31m'`
  at_grn=`printf '\033[0;32m'`
  at_lgn=`printf '\033[1;32m'`
  at_blu=`printf '\033[1;34m'`
  at_std=`printf '\033[m'`
else
  at_red= at_grn= at_lgn= at_blu= at_std=
fi

# Help message.
if $at_help_p; then
  cat <<_ATEOF || at_write_fail=1
Usage: $0 [OPTION]... [VARIABLE=VALUE]... [TESTS]

Run all the tests, or the selected TESTS, given by numeric ranges, and
save a detailed log file.  Upon failure, create debugging scripts.

Do not change environment variables directly.  Instead, set them via
command line arguments.  Set \`AUTOTEST_PATH' to select the executables
to exercise.  Each relative directory is expanded as build and source
directories relative to the top level of this distribution.
E.g., from within the build directory /tmp/foo-1.0, invoking this:

  $ $0 AUTOTEST_PATH=bin

is equivalent to the following, assuming the source directory is /src/foo-1.0:

  PATH=/tmp/foo-1.0/bin:/src/foo-1.0/bin:\$PATH $0
_ATEOF
cat <<_ATEOF || at_write_fail=1

Operation modes:
  -h, --help     print the help message, then exit
  -V, --version  print version number, then exit
  -c, --clean    remove all the files this test suite might create and exit
  -l, --list     describes all the tests, or the selected TESTS
_ATEOF
cat <<_ATEOF || at_write_fail=1

Execution tuning:
  -C, --directory=DIR
                 change to directory DIR before starting
      --color[=never|auto|always]
                 enable colored test results on terminal, or always
  -j, --jobs[=N]
                 Allow N jobs at once; infinite jobs with no arg (default 1)
  -k, --keywords=KEYWORDS
                 select the tests matching all the comma-separated KEYWORDS
                 multiple \`-k' accumulate; prefixed \`!' negates a KEYWORD
      --recheck  select all tests that failed or passed unexpectedly last time
  -e, --errexit  abort as soon as a test fails; implies --debug
  -v, --verbose  force more detailed output
                 default for debugging scripts
  -d, --debug    inhibit clean up and top-level logging
                 default for debugging scripts
  -x, --trace    enable tests shell tracing
_ATEOF
cat <<_ATEOF || at_write_fail=1

Report bugs to <bug-ed@gnu.org>.
_ATEOF
  exit $at_write_fail
fi

# List of tests.
if $at_list_p; then
  cat <<_ATEOF || at_write_fail=1
ed 2.0.5 test suite test groups:

 NUM: FILE-NAME:LINE     TEST-GROUP-NAME
      KEYWORDS

_ATEOF
  # Pass an empty line as separator between selected groups and help.
  $as_echo "$at_groups$as_nl$as_nl$at_help_all" |
    awk 'NF == 1 && FS != ";" {
	   selected[$ 1] = 1
	   next
	 }
	 /^$/ { FS = ";" }
	 NF > 0 {
	   if (selected[$ 1]) {
	     printf " %3d: %-18s %s\n", $ 1, $ 2, $ 3
	     if ($ 4) {
	       lmax = 79
	       indent = "     "
	       line = indent
	       len = length (line)
	       n = split ($ 4, a, " ")
	       for (i = 1; i <= n; i++) {
		 l = length (a[i]) + 1
		 if (i > 1 && len + l > lmax) {
		   print line
		   line = indent " " a[i]
		   len = length (line)
		 } else {
		   line = line " " a[i]
		   len += l
		 }
	       }
	       if (n)
		 print line
	     }
	   }
	 }' || at_write_fail=1
  exit $at_write_fail
fi
if $at_version_p; then
  $as_echo "$as_me (ed 2.0.5)" &&
  cat <<\_ATEOF || at_write_fail=1

Copyright (C) 2012 Free Software Foundation, Inc.
This test suite is free software; the Free Software Foundation gives
unlimited permission to copy, distribute and modify it.
_ATEOF
  exit $at_write_fail
fi

# Should we print banners?  Yes if more than one test is run.
case $at_groups in #(
  *$as_nl* )
      at_print_banners=: ;; #(
  * ) at_print_banners=false ;;
esac
# Text for banner N, set to a single space once printed.

# Take any -C into account.
if $at_change_dir ; then
  test x != "x$at_dir" && cd "$at_dir" \
    || as_fn_error $? "unable to change directory"
  at_dir=`pwd`
fi

# Load the config files for any default variable assignments.
for at_file in atconfig atlocal
do
  test -r $at_file || continue
  . ./$at_file || as_fn_error $? "invalid content: $at_file"
done

# Autoconf <=2.59b set at_top_builddir instead of at_top_build_prefix:
: "${at_top_build_prefix=$at_top_builddir}"

# Perform any assignments requested during argument parsing.
eval "$at_debug_args"

# atconfig delivers names relative to the directory the test suite is
# in, but the groups themselves are run in testsuite-dir/group-dir.
if test -n "$at_top_srcdir"; then
  builddir=../..
  for at_dir_var in srcdir top_srcdir top_build_prefix
  do
    eval at_val=\$at_$at_dir_var
    case $at_val in
      [\\/$]* | ?:[\\/]* ) at_prefix= ;;
      *) at_prefix=../../ ;;
    esac
    eval "$at_dir_var=\$at_prefix\$at_val"
  done
fi

## -------------------- ##
## Directory structure. ##
## -------------------- ##

# This is the set of directories and files used by this script
# (non-literals are capitalized):
#
# TESTSUITE         - the testsuite
# TESTSUITE.log     - summarizes the complete testsuite run
# TESTSUITE.dir/    - created during a run, remains after -d or failed test
# + at-groups/      - during a run: status of all groups in run
# | + NNN/          - during a run: meta-data about test group NNN
# | | + check-line  - location (source file and line) of current AT_CHECK
# | | + status      - exit status of current AT_CHECK
# | | + stdout      - stdout of current AT_CHECK
# | | + stder1      - stderr, including trace
# | | + stderr      - stderr, with trace filtered out
# | | + test-source - portion of testsuite that defines group
# | | + times       - timestamps for computing duration
# | | + pass        - created if group passed
# | | + xpass       - created if group xpassed
# | | + fail        - created if group failed
# | | + xfail       - created if group xfailed
# | | + skip        - created if group skipped
# + at-stop         - during a run: end the run if this file exists
# + at-source-lines - during a run: cache of TESTSUITE line numbers for extraction
# + 0..NNN/         - created for each group NNN, remains after -d or failed test
# | + TESTSUITE.log - summarizes the group results
# | + ...           - files created during the group

# The directory the whole suite works in.
# Should be absolute to let the user `cd' at will.
at_suite_dir=$at_dir/$as_me.dir
# The file containing the suite ($at_dir might have changed since earlier).
at_suite_log=$at_dir/$as_me.log
# The directory containing helper files per test group.
at_helper_dir=$at_suite_dir/at-groups
# Stop file: if it exists, do not start new jobs.
at_stop_file=$at_suite_dir/at-stop
# The fifo used for the job dispatcher.
at_job_fifo=$at_suite_dir/at-job-fifo

if $at_clean; then
  test -d "$at_suite_dir" &&
    find "$at_suite_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
  rm -f -r "$at_suite_dir" "$at_suite_log"
  exit $?
fi

# Don't take risks: use only absolute directories in PATH.
#
# For stand-alone test suites (ie. atconfig was not found),
# AUTOTEST_PATH is relative to `.'.
#
# For embedded test suites, AUTOTEST_PATH is relative to the top level
# of the package.  Then expand it into build/src parts, since users
# may create executables in both places.
AUTOTEST_PATH=`$as_echo "$AUTOTEST_PATH" | sed "s|:|$PATH_SEPARATOR|g"`
at_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $AUTOTEST_PATH $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -n "$at_path" && as_fn_append at_path $PATH_SEPARATOR
case $as_dir in
  [\\/]* | ?:[\\/]* )
    as_fn_append at_path "$as_dir"
    ;;
  * )
    if test -z "$at_top_build_prefix"; then
      # Stand-alone test suite.
      as_fn_append at_path "$as_dir"
    else
      # Embedded test suite.
      as_fn_append at_path "$at_top_build_prefix$as_dir$PATH_SEPARATOR"
      as_fn_append at_path "$at_top_srcdir/$as_dir"
    fi
    ;;
esac
  done
IFS=$as_save_IFS


# Now build and simplify PATH.
#
# There might be directories that don't exist, but don't redirect
# builtins' (eg., cd) stderr directly: Ultrix's sh hates that.
at_new_path=
as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $at_path
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -d "$as_dir" || continue
case $as_dir in
  [\\/]* | ?:[\\/]* ) ;;
  * ) as_dir=`(cd "$as_dir" && pwd) 2>/dev/null` ;;
esac
case $PATH_SEPARATOR$at_new_path$PATH_SEPARATOR in
  *$PATH_SEPARATOR$as_dir$PATH_SEPARATOR*) ;;
  $PATH_SEPARATOR$PATH_SEPARATOR) at_new_path=$as_dir ;;
  *) as_fn_append at_new_path "$PATH_SEPARATOR$as_dir" ;;
esac
  done
IFS=$as_save_IFS

PATH=$at_new_path
export PATH

# Setting up the FDs.



# 5 is the log file.  Not to be overwritten if `-d'.
if $at_debug_p; then
  at_suite_log=/dev/null
else
  : >"$at_suite_log"
fi
exec 5>>"$at_suite_log"

# Banners and logs.
$as_echo "## -------------------- ##
## ed 2.0.5 test suite. ##
## -------------------- ##"
{
  $as_echo "## -------------------- ##
## ed 2.0.5 test suite. ##
## -------------------- ##"
  echo

  $as_echo "$as_me: command line was:"
  $as_echo "  \$ $0 $at_cli_args"
  echo

  # If ChangeLog exists, list a few lines in case it might help determining
  # the exact version.
  if test -n "$at_top_srcdir" && test -f "$at_top_srcdir/ChangeLog"; then
    $as_echo "## ---------- ##
## ChangeLog. ##
## ---------- ##"
    echo
    sed 's/^/| /;10q' "$at_top_srcdir/ChangeLog"
    echo
  fi

  {
cat <<_ASUNAME
## --------- ##
## Platform. ##
## --------- ##

hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
uname -m = `(uname -m) 2>/dev/null || echo unknown`
uname -r = `(uname -r) 2>/dev/null || echo unknown`
uname -s = `(uname -s) 2>/dev/null || echo unknown`
uname -v = `(uname -v) 2>/dev/null || echo unknown`

/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`

/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`
/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`

_ASUNAME

as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    $as_echo "PATH: $as_dir"
  done
IFS=$as_save_IFS

}
  echo

  # Contents of the config files.
  for at_file in atconfig atlocal
  do
    test -r $at_file || continue
    $as_echo "$as_me: $at_file:"
    sed 's/^/| /' $at_file
    echo
  done
} >&5


## ------------------------- ##
## Autotest shell functions. ##
## ------------------------- ##

# at_fn_banner NUMBER
# -------------------
# Output banner NUMBER, provided the testsuite is running multiple groups and
# this particular banner has not yet been printed.
at_fn_banner ()
{
  $at_print_banners || return 0
  eval at_banner_text=\$at_banner_text_$1
  test "x$at_banner_text" = "x " && return 0
  eval "at_banner_text_$1=\" \""
  if test -z "$at_banner_text"; then
    $at_first || echo
  else
    $as_echo "$as_nl$at_banner_text$as_nl"
  fi
} # at_fn_banner

# at_fn_check_prepare_notrace REASON LINE
# ---------------------------------------
# Perform AT_CHECK preparations for the command at LINE for an untraceable
# command; REASON is the reason for disabling tracing.
at_fn_check_prepare_notrace ()
{
  $at_trace_echo "Not enabling shell tracing (command contains $1)"
  $as_echo "$2" >"$at_check_line_file"
  at_check_trace=: at_check_filter=:
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_trace LINE
# ------------------------------
# Perform AT_CHECK preparations for the command at LINE for a traceable
# command.
at_fn_check_prepare_trace ()
{
  $as_echo "$1" >"$at_check_line_file"
  at_check_trace=$at_traceon at_check_filter=$at_check_filter_trace
  : >"$at_stdout"; : >"$at_stderr"
}

# at_fn_check_prepare_dynamic COMMAND LINE
# ----------------------------------------
# Decide if COMMAND at LINE is traceable at runtime, and call the appropriate
# preparation function.
at_fn_check_prepare_dynamic ()
{
  case $1 in
    *$as_nl*)
      at_fn_check_prepare_notrace 'an embedded newline' "$2" ;;
    *)
      at_fn_check_prepare_trace "$2" ;;
  esac
}

# at_fn_filter_trace
# ------------------
# Remove the lines in the file "$at_stderr" generated by "set -x" and print
# them to stderr.
at_fn_filter_trace ()
{
  mv "$at_stderr" "$at_stder1"
  grep '^ *+' "$at_stder1" >&2
  grep -v '^ *+' "$at_stder1" >"$at_stderr"
}

# at_fn_log_failure FILE-LIST
# ---------------------------
# Copy the files in the list on stdout with a "> " prefix, and exit the shell
# with a failure exit code.
at_fn_log_failure ()
{
  for file
    do $as_echo "$file:"; sed 's/^/> /' "$file"; done
  echo 1 > "$at_status_file"
  exit 1
}

# at_fn_check_skip EXIT-CODE LINE
# -------------------------------
# Check whether EXIT-CODE is a special exit code (77 or 99), and if so exit
# the test group subshell with that same exit code. Use LINE in any report
# about test failure.
at_fn_check_skip ()
{
  case $1 in
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$2: hard failure"; exit 99;;
    77) echo 77 > "$at_status_file"; exit 77;;
  esac
}

# at_fn_check_status EXPECTED EXIT-CODE LINE
# ------------------------------------------
# Check whether EXIT-CODE is the EXPECTED exit code, and if so do nothing.
# Otherwise, if it is 77 or 99, exit the test group subshell with that same
# exit code; if it is anything else print an error message referring to LINE,
# and fail the test.
at_fn_check_status ()
{
  case $2 in
    $1 ) ;;
    77) echo 77 > "$at_status_file"; exit 77;;
    99) echo 99 > "$at_status_file"; at_failed=:
	$as_echo "$3: hard failure"; exit 99;;
    *) $as_echo "$3: exit code was $2, expected $1"
      at_failed=:;;
  esac
}

# at_fn_diff_devnull FILE
# -----------------------
# Emit a diff between /dev/null and FILE. Uses "test -s" to avoid useless diff
# invocations.
at_fn_diff_devnull ()
{
  test -s "$1" || return 0
  $at_diff "$at_devnull" "$1"
}

# at_fn_test NUMBER
# -----------------
# Parse out test NUMBER from the tail of this file.
at_fn_test ()
{
  eval at_sed=\$at_sed$1
  sed "$at_sed" "$at_myself" > "$at_test_source"
}

# at_fn_create_debugging_script
# -----------------------------
# Create the debugging script $at_group_dir/run which will reproduce the
# current test group.
at_fn_create_debugging_script ()
{
  {
    echo "#! /bin/sh" &&
    echo 'test "${ZSH_VERSION+set}" = set && alias -g '\''${1+"$@"}'\''='\''"$@"'\''' &&
    $as_echo "cd '$at_dir'" &&
    $as_echo "exec \${CONFIG_SHELL-$SHELL} \"$at_myself\" -v -d $at_debug_args $at_group \${1+\"\$@\"}" &&
    echo 'exit 1'
  } >"$at_group_dir/run" &&
  chmod +x "$at_group_dir/run"
}

## -------------------------------- ##
## End of autotest shell functions. ##
## -------------------------------- ##
{
  $as_echo "## ---------------- ##
## Tested programs. ##
## ---------------- ##"
  echo
} >&5

# Report what programs are being tested.
for at_program in : $at_tested
do
  test "$at_program" = : && continue
  case $at_program in
    [\\/]* | ?:[\\/]* ) $at_program_=$at_program ;;
    * )
    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
for as_dir in $PATH
do
  IFS=$as_save_IFS
  test -z "$as_dir" && as_dir=.
    test -f "$as_dir/$at_program" && break
  done
IFS=$as_save_IFS

    at_program_=$as_dir/$at_program ;;
  esac
  if test -f "$at_program_"; then
    {
      $as_echo "$at_srcdir/testsuite.at:1: $at_program_ --version"
      "$at_program_" --version </dev/null
      echo
    } >&5 2>&1
  else
    as_fn_error $? "cannot find $at_program" "$LINENO" 5
  fi
done

{
  $as_echo "## ------------------ ##
## Running the tests. ##
## ------------------ ##"
} >&5

at_start_date=`date`
at_start_time=`date +%s 2>/dev/null`
$as_echo "$as_me: starting at: $at_start_date" >&5

# Create the master directory if it doesn't already exist.
as_dir="$at_suite_dir"; as_fn_mkdir_p ||
  as_fn_error $? "cannot create \`$at_suite_dir'" "$LINENO" 5

# Can we diff with `/dev/null'?  DU 5.0 refuses.
if diff /dev/null /dev/null >/dev/null 2>&1; then
  at_devnull=/dev/null
else
  at_devnull=$at_suite_dir/devnull
  >"$at_devnull"
fi

# Use `diff -u' when possible.
if at_diff=`diff -u "$at_devnull" "$at_devnull" 2>&1` && test -z "$at_diff"
then
  at_diff='diff -u'
else
  at_diff=diff
fi

# Get the last needed group.
for at_group in : $at_groups; do :; done

# Extract the start and end lines of each test group at the tail
# of this file
awk '
BEGIN { FS="" }
/^#AT_START_/ {
  start = NR
}
/^#AT_STOP_/ {
  test = substr ($ 0, 10)
  print "at_sed" test "=\"1," start "d;" (NR-1) "q\""
  if (test == "'"$at_group"'") exit
}' "$at_myself" > "$at_suite_dir/at-source-lines" &&
. "$at_suite_dir/at-source-lines" ||
  as_fn_error $? "cannot create test line number cache" "$LINENO" 5
rm -f "$at_suite_dir/at-source-lines"

# Set number of jobs for `-j'; avoid more jobs than test groups.
set X $at_groups; shift; at_max_jobs=$#
if test $at_max_jobs -eq 0; then
  at_jobs=1
fi
if test $at_jobs -ne 1 &&
   { test $at_jobs -eq 0 || test $at_jobs -gt $at_max_jobs; }; then
  at_jobs=$at_max_jobs
fi

# If parallel mode, don't output banners, don't split summary lines.
if test $at_jobs -ne 1; then
  at_print_banners=false
  at_quiet=:
fi

# Set up helper dirs.
rm -rf "$at_helper_dir" &&
mkdir "$at_helper_dir" &&
cd "$at_helper_dir" &&
{ test -z "$at_groups" || mkdir $at_groups; } ||
as_fn_error $? "testsuite directory setup failed" "$LINENO" 5

# Functions for running a test group.  We leave the actual
# test group execution outside of a shell function in order
# to avoid hitting zsh 4.x exit status bugs.

# at_fn_group_prepare
# -------------------
# Prepare for running a test group.
at_fn_group_prepare ()
{
  # The directory for additional per-group helper files.
  at_job_dir=$at_helper_dir/$at_group
  # The file containing the location of the last AT_CHECK.
  at_check_line_file=$at_job_dir/check-line
  # The file containing the exit status of the last command.
  at_status_file=$at_job_dir/status
  # The files containing the output of the tested commands.
  at_stdout=$at_job_dir/stdout
  at_stder1=$at_job_dir/stder1
  at_stderr=$at_job_dir/stderr
  # The file containing the code for a test group.
  at_test_source=$at_job_dir/test-source
  # The file containing dates.
  at_times_file=$at_job_dir/times

  # Be sure to come back to the top test directory.
  cd "$at_suite_dir"

  # Clearly separate the test groups when verbose.
  $at_first || $at_verbose echo

  at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'


  # Create a fresh directory for the next test group, and enter.
  # If one already exists, the user may have invoked ./run from
  # within that directory; we remove the contents, but not the
  # directory itself, so that we aren't pulling the rug out from
  # under the shell's notion of the current directory.
  at_group_dir=$at_suite_dir/$at_group_normalized
  at_group_log=$at_group_dir/$as_me.log
  if test -d "$at_group_dir"; then
  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx {} \;
  rm -fr "$at_group_dir"/* "$at_group_dir"/.[!.] "$at_group_dir"/.??*
fi ||
    { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: test directory for $at_group_normalized could not be cleaned" >&5
$as_echo "$as_me: WARNING: test directory for $at_group_normalized could not be cleaned" >&2;}
  # Be tolerant if the above `rm' was not able to remove the directory.
  as_dir="$at_group_dir"; as_fn_mkdir_p

  echo 0 > "$at_status_file"

  # In verbose mode, append to the log file *and* show on
  # the standard output; in quiet mode only write to the log.
  if test -z "$at_verbose"; then
    at_tee_pipe='tee -a "$at_group_log"'
  else
    at_tee_pipe='cat >> "$at_group_log"'
  fi
}

# at_fn_group_banner ORDINAL LINE DESC PAD [BANNER]
# -------------------------------------------------
# Declare the test group ORDINAL, located at LINE with group description DESC,
# and residing under BANNER. Use PAD to align the status column.
at_fn_group_banner ()
{
  at_setup_line="$2"
  test -n "$5" && at_fn_banner $5
  at_desc="$3"
  case $1 in
    [0-9])      at_desc_line="  $1: ";;
    [0-9][0-9]) at_desc_line=" $1: " ;;
    *)          at_desc_line="$1: "  ;;
  esac
  as_fn_append at_desc_line "$3$4"
  $at_quiet $as_echo_n "$at_desc_line"
  echo "#                             -*- compilation -*-" >> "$at_group_log"
}

# at_fn_group_postprocess
# -----------------------
# Perform cleanup after running a test group.
at_fn_group_postprocess ()
{
  # Be sure to come back to the suite directory, in particular
  # since below we might `rm' the group directory we are in currently.
  cd "$at_suite_dir"

  if test ! -f "$at_check_line_file"; then
    sed "s/^ */$as_me: WARNING: /" <<_ATEOF
      A failure happened in a test group before any test could be
      run. This means that test suite is improperly designed.  Please
      report this failure to <bug-ed@gnu.org>.
_ATEOF
    $as_echo "$at_setup_line" >"$at_check_line_file"
    at_status=99
  fi
  $at_verbose $as_echo_n "$at_group. $at_setup_line: "
  $as_echo_n "$at_group. $at_setup_line: " >> "$at_group_log"
  case $at_xfail:$at_status in
    yes:0)
	at_msg="UNEXPECTED PASS"
	at_res=xpass
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    no:0)
	at_msg="ok"
	at_res=pass
	at_errexit=false
	at_color=$at_grn
	;;
    *:77)
	at_msg='skipped ('`cat "$at_check_line_file"`')'
	at_res=skip
	at_errexit=false
	at_color=$at_blu
	;;
    no:* | *:99)
	at_msg='FAILED ('`cat "$at_check_line_file"`')'
	at_res=fail
	at_errexit=$at_errexit_p
	at_color=$at_red
	;;
    yes:*)
	at_msg='expected failure ('`cat "$at_check_line_file"`')'
	at_res=xfail
	at_errexit=false
	at_color=$at_lgn
	;;
  esac
  echo "$at_res" > "$at_job_dir/$at_res"
  # In parallel mode, output the summary line only afterwards.
  if test $at_jobs -ne 1 && test -n "$at_verbose"; then
    $as_echo "$at_desc_line $at_color$at_msg$at_std"
  else
    # Make sure there is a separator even with long titles.
    $as_echo " $at_color$at_msg$at_std"
  fi
  at_log_msg="$at_group. $at_desc ($at_setup_line): $at_msg"
  case $at_status in
    0|77)
      # $at_times_file is only available if the group succeeded.
      # We're not including the group log, so the success message
      # is written in the global log separately.  But we also
      # write to the group log in case they're using -d.
      if test -f "$at_times_file"; then
	at_log_msg="$at_log_msg     ("`sed 1d "$at_times_file"`')'
	rm -f "$at_times_file"
      fi
      $as_echo "$at_log_msg" >> "$at_group_log"
      $as_echo "$at_log_msg" >&5

      # Cleanup the group directory, unless the user wants the files
      # or the success was unexpected.
      if $at_debug_p || test $at_res = xpass; then
	at_fn_create_debugging_script
	if test $at_res = xpass && $at_errexit; then
	  echo stop > "$at_stop_file"
	fi
      else
	if test -d "$at_group_dir"; then
	  find "$at_group_dir" -type d ! -perm -700 -exec chmod u+rwx \{\} \;
	  rm -fr "$at_group_dir"
	fi
	rm -f "$at_test_source"
      fi
      ;;
    *)
      # Upon failure, include the log into the testsuite's global
      # log.  The failure message is written in the group log.  It
      # is later included in the global log.
      $as_echo "$at_log_msg" >> "$at_group_log"

      # Upon failure, keep the group directory for autopsy, and create
      # the debugging script.  With -e, do not start any further tests.
      at_fn_create_debugging_script
      if $at_errexit; then
	echo stop > "$at_stop_file"
      fi
      ;;
  esac
}


## ------------ ##
## Driver loop. ##
## ------------ ##


if (set -m && set +m && set +b) >/dev/null 2>&1; then
  set +b
  at_job_control_on='set -m' at_job_control_off='set +m' at_job_group=-
else
  at_job_control_on=: at_job_control_off=: at_job_group=
fi

for at_signal in 1 2 15; do
  trap 'set +x; set +e
	$at_job_control_off
	at_signal='"$at_signal"'
	echo stop > "$at_stop_file"
	trap "" $at_signal
	at_pgids=
	for at_pgid in `jobs -p 2>/dev/null`; do
	  at_pgids="$at_pgids $at_job_group$at_pgid"
	done
	test -z "$at_pgids" || kill -$at_signal $at_pgids 2>/dev/null
	wait
	if test "$at_jobs" -eq 1 || test -z "$at_verbose"; then
	  echo >&2
	fi
	at_signame=`kill -l $at_signal 2>&1 || echo $at_signal`
	set x $at_signame
	test 0 -gt 2 && at_signame=$at_signal
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: caught signal $at_signame, bailing out" >&5
$as_echo "$as_me: WARNING: caught signal $at_signame, bailing out" >&2;}
	as_fn_arith 128 + $at_signal && exit_status=$as_val
	as_fn_exit $exit_status' $at_signal
done

rm -f "$at_stop_file"
at_first=:

if test $at_jobs -ne 1 &&
     rm -f "$at_job_fifo" &&
     test -n "$at_job_group" &&
     ( mkfifo "$at_job_fifo" && trap 'exit 1' PIPE STOP TSTP ) 2>/dev/null
then
  # FIFO job dispatcher.

  trap 'at_pids=
	for at_pid in `jobs -p`; do
	  at_pids="$at_pids $at_job_group$at_pid"
	done
	if test -n "$at_pids"; then
	  at_sig=TSTP
	  test "${TMOUT+set}" = set && at_sig=STOP
	  kill -$at_sig $at_pids 2>/dev/null
	fi
	kill -STOP $$
	test -z "$at_pids" || kill -CONT $at_pids 2>/dev/null' TSTP

  echo
  # Turn jobs into a list of numbers, starting from 1.
  at_joblist=`$as_echo "$at_groups" | sed -n 1,${at_jobs}p`

  set X $at_joblist
  shift
  for at_group in $at_groups; do
    $at_job_control_on 2>/dev/null
    (
      # Start one test group.
      $at_job_control_off
      if $at_first; then
	exec 7>"$at_job_fifo"
      else
	exec 6<&-
      fi
      trap 'set +x; set +e
	    trap "" PIPE
	    echo stop > "$at_stop_file"
	    echo >&7
	    as_fn_exit 141' PIPE
      at_fn_group_prepare
      if cd "$at_group_dir" &&
	 at_fn_test $at_group &&
	 . "$at_test_source"
      then :; else
	{ $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
	at_failed=:
      fi
      at_fn_group_postprocess
      echo >&7
    ) &
    $at_job_control_off
    if $at_first; then
      at_first=false
      exec 6<"$at_job_fifo" 7>"$at_job_fifo"
    fi
    shift # Consume one token.
    if test $# -gt 0; then :; else
      read at_token <&6 || break
      set x $*
    fi
    test -f "$at_stop_file" && break
  done
  exec 7>&-
  # Read back the remaining ($at_jobs - 1) tokens.
  set X $at_joblist
  shift
  if test $# -gt 0; then
    shift
    for at_job
    do
      read at_token
    done <&6
  fi
  exec 6<&-
  wait
else
  # Run serially, avoid forks and other potential surprises.
  for at_group in $at_groups; do
    at_fn_group_prepare
    if cd "$at_group_dir" &&
       at_fn_test $at_group &&
       . "$at_test_source"; then :; else
      { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: unable to parse test group: $at_group" >&5
$as_echo "$as_me: WARNING: unable to parse test group: $at_group" >&2;}
      at_failed=:
    fi
    at_fn_group_postprocess
    test -f "$at_stop_file" && break
    at_first=false
  done
fi

# Wrap up the test suite with summary statistics.
cd "$at_helper_dir"

# Use ?..???? when the list must remain sorted, the faster * otherwise.
at_pass_list=`for f in */pass; do echo $f; done | sed '/\*/d; s,/pass,,'`
at_skip_list=`for f in */skip; do echo $f; done | sed '/\*/d; s,/skip,,'`
at_xfail_list=`for f in */xfail; do echo $f; done | sed '/\*/d; s,/xfail,,'`
at_xpass_list=`for f in ?/xpass ??/xpass ???/xpass ????/xpass; do
		 echo $f; done | sed '/?/d; s,/xpass,,'`
at_fail_list=`for f in ?/fail ??/fail ???/fail ????/fail; do
		echo $f; done | sed '/?/d; s,/fail,,'`

set X $at_pass_list $at_xpass_list $at_xfail_list $at_fail_list $at_skip_list
shift; at_group_count=$#
set X $at_xpass_list; shift; at_xpass_count=$#; at_xpass_list=$*
set X $at_xfail_list; shift; at_xfail_count=$#
set X $at_fail_list; shift; at_fail_count=$#; at_fail_list=$*
set X $at_skip_list; shift; at_skip_count=$#

as_fn_arith $at_group_count - $at_skip_count && at_run_count=$as_val
as_fn_arith $at_xpass_count + $at_fail_count && at_unexpected_count=$as_val
as_fn_arith $at_xfail_count + $at_fail_count && at_total_fail_count=$as_val

# Back to the top directory.
cd "$at_dir"
rm -rf "$at_helper_dir"

# Compute the duration of the suite.
at_stop_date=`date`
at_stop_time=`date +%s 2>/dev/null`
$as_echo "$as_me: ending at: $at_stop_date" >&5
case $at_start_time,$at_stop_time in
  [0-9]*,[0-9]*)
    as_fn_arith $at_stop_time - $at_start_time && at_duration_s=$as_val
    as_fn_arith $at_duration_s / 60 && at_duration_m=$as_val
    as_fn_arith $at_duration_m / 60 && at_duration_h=$as_val
    as_fn_arith $at_duration_s % 60 && at_duration_s=$as_val
    as_fn_arith $at_duration_m % 60 && at_duration_m=$as_val
    at_duration="${at_duration_h}h ${at_duration_m}m ${at_duration_s}s"
    $as_echo "$as_me: test suite duration: $at_duration" >&5
    ;;
esac

echo
$as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
echo
{
  echo
  $as_echo "## ------------- ##
## Test results. ##
## ------------- ##"
  echo
} >&5

if test $at_run_count = 1; then
  at_result="1 test"
  at_were=was
else
  at_result="$at_run_count tests"
  at_were=were
fi
if $at_errexit_p && test $at_unexpected_count != 0; then
  if test $at_xpass_count = 1; then
    at_result="$at_result $at_were run, one passed"
  else
    at_result="$at_result $at_were run, one failed"
  fi
  at_result="$at_result unexpectedly and inhibited subsequent tests."
  at_color=$at_red
else
  # Don't you just love exponential explosion of the number of cases?
  at_color=$at_red
  case $at_xpass_count:$at_fail_count:$at_xfail_count in
    # So far, so good.
    0:0:0) at_result="$at_result $at_were successful." at_color=$at_grn ;;
    0:0:*) at_result="$at_result behaved as expected." at_color=$at_lgn ;;

    # Some unexpected failures
    0:*:0) at_result="$at_result $at_were run,
$at_fail_count failed unexpectedly." ;;

    # Some failures, both expected and unexpected
    0:*:1) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    0:*:*) at_result="$at_result $at_were run,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;

    # No unexpected failures, but some xpasses
    *:0:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly." ;;

    # No expected failures, but failures and xpasses
    *:1:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failure)." ;;
    *:*:0) at_result="$at_result $at_were run,
$at_unexpected_count did not behave as expected ($at_fail_count unexpected failures)." ;;

    # All of them.
    *:*:1) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failure)." ;;
    *:*:*) at_result="$at_result $at_were run,
$at_xpass_count passed unexpectedly,
$at_total_fail_count failed ($at_xfail_count expected failures)." ;;
  esac

  if test $at_skip_count = 0 && test $at_run_count -gt 1; then
    at_result="All $at_result"
  fi
fi

# Now put skips in the mix.
case $at_skip_count in
  0) ;;
  1) at_result="$at_result
1 test was skipped." ;;
  *) at_result="$at_result
$at_skip_count tests were skipped." ;;
esac

if test $at_unexpected_count = 0; then
  echo "$at_color$at_result$at_std"
  echo "$at_result" >&5
else
  echo "${at_color}ERROR: $at_result$at_std" >&2
  echo "ERROR: $at_result" >&5
  {
    echo
    $as_echo "## ------------------------ ##
## Summary of the failures. ##
## ------------------------ ##"

    # Summary of failed and skipped tests.
    if test $at_fail_count != 0; then
      echo "Failed tests:"
      $SHELL "$at_myself" $at_fail_list --list
      echo
    fi
    if test $at_skip_count != 0; then
      echo "Skipped tests:"
      $SHELL "$at_myself" $at_skip_list --list
      echo
    fi
    if test $at_xpass_count != 0; then
      echo "Unexpected passes:"
      $SHELL "$at_myself" $at_xpass_list --list
      echo
    fi
    if test $at_fail_count != 0; then
      $as_echo "## ---------------------- ##
## Detailed failed tests. ##
## ---------------------- ##"
      echo
      for at_group in $at_fail_list
      do
	at_group_normalized=$at_group

  eval 'while :; do
    case $at_group_normalized in #(
    '"$at_format"'*) break;;
    esac
    at_group_normalized=0$at_group_normalized
  done'

	cat "$at_suite_dir/$at_group_normalized/$as_me.log"
	echo
      done
      echo
    fi
    if test -n "$at_top_srcdir"; then
      sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## ${at_top_build_prefix}config.log ##
_ASBOX
      sed 's/^/| /' ${at_top_build_prefix}config.log
      echo
    fi
  } >&5

  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
## $as_me.log was created. ##
_ASBOX

  echo
  if $at_debug_p; then
    at_msg='per-test log files'
  else
    at_msg="\`${at_testdir+${at_testdir}/}$as_me.log'"
  fi
  $as_echo "Please send $at_msg and all information you think might help:

   To: <bug-ed@gnu.org>
   Subject: [ed 2.0.5] $as_me: $at_fail_list${at_fail_list:+ failed${at_xpass_list:+, }}$at_xpass_list${at_xpass_list:+ passed unexpectedly}

You may investigate any problem if you feel able to do so, in which
case the test suite provides a good starting point.  Its output may
be found below \`${at_testdir+${at_testdir}/}$as_me.dir'.
"
  exit 1
fi

exit 0

## ------------- ##
## Actual tests. ##
## ------------- ##
#AT_START_1
at_fn_group_banner 1 'a.ok-at:7' \
  "Script: a.t" "                                    "
at_xfail=no
(
  $as_echo "1. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-a <<_ATEOF_ED
H
r ../../a.d
$(test -s ../../a.t &&
cat ../../a.t ||
echo "w a.o")
wq a.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/a.ok-at:20: ed -f script-a &&
cmp ../../a.r a.o"
at_fn_check_prepare_notrace 'an embedded newline' "a.ok-at:20"
( $at_check_trace; ed -f script-a &&
cmp ../../a.r a.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/a.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_1
#AT_START_2
at_fn_group_banner 2 'addr.ok-at:7' \
  "Script: addr.t" "                                 "
at_xfail=no
(
  $as_echo "2. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-addr <<_ATEOF_ED
H
r ../../addr.d
$(test -s ../../addr.t &&
cat ../../addr.t ||
echo "w addr.o")
wq addr.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/addr.ok-at:20: ed -f script-addr &&
cmp ../../addr.r addr.o"
at_fn_check_prepare_notrace 'an embedded newline' "addr.ok-at:20"
( $at_check_trace; ed -f script-addr &&
cmp ../../addr.r addr.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/addr.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_2
#AT_START_3
at_fn_group_banner 3 'ascii.ok-at:7' \
  "Script: ascii.t" "                                "
at_xfail=no
(
  $as_echo "3. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-ascii <<_ATEOF_ED
H
r ../../ascii.d
$(test -s ../../ascii.t &&
cat ../../ascii.t ||
echo "w ascii.o")
wq ascii.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/ascii.ok-at:20: ed -f script-ascii &&
cmp ../../ascii.r ascii.o"
at_fn_check_prepare_notrace 'an embedded newline' "ascii.ok-at:20"
( $at_check_trace; ed -f script-ascii &&
cmp ../../ascii.r ascii.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/ascii.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_3
#AT_START_4
at_fn_group_banner 4 'bang1.ok-at:7' \
  "Script: bang1.t" "                                "
at_xfail=no
(
  $as_echo "4. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-bang1 <<_ATEOF_ED
H
r ../../bang1.d
$(test -s ../../bang1.t &&
cat ../../bang1.t ||
echo "w bang1.o")
wq bang1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/bang1.ok-at:20: ed -f script-bang1 &&
cmp ../../bang1.r bang1.o"
at_fn_check_prepare_notrace 'an embedded newline' "bang1.ok-at:20"
( $at_check_trace; ed -f script-bang1 &&
cmp ../../bang1.r bang1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bang1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_4
#AT_START_5
at_fn_group_banner 5 'c1.ok-at:7' \
  "Script: c1.t" "                                   "
at_xfail=no
(
  $as_echo "5. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-c1 <<_ATEOF_ED
H
r ../../c1.d
$(test -s ../../c1.t &&
cat ../../c1.t ||
echo "w c1.o")
wq c1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/c1.ok-at:20: ed -f script-c1 &&
cmp ../../c1.r c1.o"
at_fn_check_prepare_notrace 'an embedded newline' "c1.ok-at:20"
( $at_check_trace; ed -f script-c1 &&
cmp ../../c1.r c1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/c1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_5
#AT_START_6
at_fn_group_banner 6 'c2.ok-at:7' \
  "Script: c2.t" "                                   "
at_xfail=no
(
  $as_echo "6. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-c2 <<_ATEOF_ED
H
r ../../c2.d
$(test -s ../../c2.t &&
cat ../../c2.t ||
echo "w c2.o")
wq c2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/c2.ok-at:20: ed -f script-c2 &&
cmp ../../c2.r c2.o"
at_fn_check_prepare_notrace 'an embedded newline' "c2.ok-at:20"
( $at_check_trace; ed -f script-c2 &&
cmp ../../c2.r c2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/c2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_6
#AT_START_7
at_fn_group_banner 7 'comment.ok-at:7' \
  "Script: comment.t" "                              "
at_xfail=no
(
  $as_echo "7. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-comment <<_ATEOF_ED
H
r ../../comment.d
$(test -s ../../comment.t &&
cat ../../comment.t ||
echo "w comment.o")
wq comment.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/comment.ok-at:20: ed -f script-comment &&
cmp ../../comment.r comment.o"
at_fn_check_prepare_notrace 'an embedded newline' "comment.ok-at:20"
( $at_check_trace; ed -f script-comment &&
cmp ../../comment.r comment.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/comment.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_7
#AT_START_8
at_fn_group_banner 8 'd.ok-at:7' \
  "Script: d.t" "                                    "
at_xfail=no
(
  $as_echo "8. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-d <<_ATEOF_ED
H
r ../../d.d
$(test -s ../../d.t &&
cat ../../d.t ||
echo "w d.o")
wq d.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/d.ok-at:20: ed -f script-d &&
cmp ../../d.r d.o"
at_fn_check_prepare_notrace 'an embedded newline' "d.ok-at:20"
( $at_check_trace; ed -f script-d &&
cmp ../../d.r d.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/d.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_8
#AT_START_9
at_fn_group_banner 9 'e1.ok-at:7' \
  "Script: e1.t" "                                   "
at_xfail=no
(
  $as_echo "9. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e1 <<_ATEOF_ED
H
r ../../e1.d
$(test -s ../../e1.t &&
cat ../../e1.t ||
echo "w e1.o")
wq e1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e1.ok-at:20: ed -f script-e1 &&
cmp ../../e1.r e1.o"
at_fn_check_prepare_notrace 'an embedded newline' "e1.ok-at:20"
( $at_check_trace; ed -f script-e1 &&
cmp ../../e1.r e1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_9
#AT_START_10
at_fn_group_banner 10 'e2.ok-at:7' \
  "Script: e2.t" "                                   "
at_xfail=no
(
  $as_echo "10. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e2 <<_ATEOF_ED
H
r ../../e2.d
$(test -s ../../e2.t &&
cat ../../e2.t ||
echo "w e2.o")
wq e2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e2.ok-at:20: ed -f script-e2 &&
cmp ../../e2.r e2.o"
at_fn_check_prepare_notrace 'an embedded newline' "e2.ok-at:20"
( $at_check_trace; ed -f script-e2 &&
cmp ../../e2.r e2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_10
#AT_START_11
at_fn_group_banner 11 'e3.ok-at:7' \
  "Script: e3.t" "                                   "
at_xfail=no
(
  $as_echo "11. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e3 <<_ATEOF_ED
H
r ../../e3.d
$(test -s ../../e3.t &&
cat ../../e3.t ||
echo "w e3.o")
wq e3.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e3.ok-at:20: ed -f script-e3 &&
cmp ../../e3.r e3.o"
at_fn_check_prepare_notrace 'an embedded newline' "e3.ok-at:20"
( $at_check_trace; ed -f script-e3 &&
cmp ../../e3.r e3.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e3.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_11
#AT_START_12
at_fn_group_banner 12 'e4.ok-at:7' \
  "Script: e4.t" "                                   "
at_xfail=no
(
  $as_echo "12. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e4 <<_ATEOF_ED
H
r ../../e4.d
$(test -s ../../e4.t &&
cat ../../e4.t ||
echo "w e4.o")
wq e4.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e4.ok-at:20: ed -f script-e4 &&
cmp ../../e4.r e4.o"
at_fn_check_prepare_notrace 'an embedded newline' "e4.ok-at:20"
( $at_check_trace; ed -f script-e4 &&
cmp ../../e4.r e4.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e4.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_12
#AT_START_13
at_fn_group_banner 13 'e5.ok-at:7' \
  "Script: e5.t" "                                   "
at_xfail=no
(
  $as_echo "13. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e5 <<_ATEOF_ED
H
r ../../e5.d
$(test -s ../../e5.t &&
cat ../../e5.t ||
echo "w e5.o")
wq e5.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e5.ok-at:20: ed -f script-e5 &&
cmp ../../e5.r e5.o"
at_fn_check_prepare_notrace 'an embedded newline' "e5.ok-at:20"
( $at_check_trace; ed -f script-e5 &&
cmp ../../e5.r e5.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e5.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_13
#AT_START_14
at_fn_group_banner 14 'g1.ok-at:7' \
  "Script: g1.t" "                                   "
at_xfail=no
(
  $as_echo "14. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g1 <<_ATEOF_ED
H
r ../../g1.d
$(test -s ../../g1.t &&
cat ../../g1.t ||
echo "w g1.o")
wq g1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g1.ok-at:20: ed -f script-g1 &&
cmp ../../g1.r g1.o"
at_fn_check_prepare_notrace 'an embedded newline' "g1.ok-at:20"
( $at_check_trace; ed -f script-g1 &&
cmp ../../g1.r g1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_14
#AT_START_15
at_fn_group_banner 15 'g2.ok-at:7' \
  "Script: g2.t" "                                   "
at_xfail=no
(
  $as_echo "15. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g2 <<_ATEOF_ED
H
r ../../g2.d
$(test -s ../../g2.t &&
cat ../../g2.t ||
echo "w g2.o")
wq g2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g2.ok-at:20: ed -f script-g2 &&
cmp ../../g2.r g2.o"
at_fn_check_prepare_notrace 'an embedded newline' "g2.ok-at:20"
( $at_check_trace; ed -f script-g2 &&
cmp ../../g2.r g2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_15
#AT_START_16
at_fn_group_banner 16 'g3.ok-at:7' \
  "Script: g3.t" "                                   "
at_xfail=no
(
  $as_echo "16. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g3 <<_ATEOF_ED
H
r ../../g3.d
$(test -s ../../g3.t &&
cat ../../g3.t ||
echo "w g3.o")
wq g3.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g3.ok-at:20: ed -f script-g3 &&
cmp ../../g3.r g3.o"
at_fn_check_prepare_notrace 'an embedded newline' "g3.ok-at:20"
( $at_check_trace; ed -f script-g3 &&
cmp ../../g3.r g3.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g3.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_16
#AT_START_17
at_fn_group_banner 17 'g4.ok-at:7' \
  "Script: g4.t" "                                   "
at_xfail=no
(
  $as_echo "17. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g4 <<_ATEOF_ED
H
r ../../g4.d
$(test -s ../../g4.t &&
cat ../../g4.t ||
echo "w g4.o")
wq g4.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g4.ok-at:20: ed -f script-g4 &&
cmp ../../g4.r g4.o"
at_fn_check_prepare_notrace 'an embedded newline' "g4.ok-at:20"
( $at_check_trace; ed -f script-g4 &&
cmp ../../g4.r g4.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g4.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_17
#AT_START_18
at_fn_group_banner 18 'g5.ok-at:7' \
  "Script: g5.t" "                                   "
at_xfail=no
(
  $as_echo "18. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g5 <<_ATEOF_ED
H
r ../../g5.d
$(test -s ../../g5.t &&
cat ../../g5.t ||
echo "w g5.o")
wq g5.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g5.ok-at:20: ed -f script-g5 &&
cmp ../../g5.r g5.o"
at_fn_check_prepare_notrace 'an embedded newline' "g5.ok-at:20"
( $at_check_trace; ed -f script-g5 &&
cmp ../../g5.r g5.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g5.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_18
#AT_START_19
at_fn_group_banner 19 'i1.ok-at:7' \
  "Script: i1.t" "                                   "
at_xfail=no
(
  $as_echo "19. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-i1 <<_ATEOF_ED
H
r ../../i1.d
$(test -s ../../i1.t &&
cat ../../i1.t ||
echo "w i1.o")
wq i1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/i1.ok-at:20: ed -f script-i1 &&
cmp ../../i1.r i1.o"
at_fn_check_prepare_notrace 'an embedded newline' "i1.ok-at:20"
( $at_check_trace; ed -f script-i1 &&
cmp ../../i1.r i1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/i1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_19
#AT_START_20
at_fn_group_banner 20 'i2.ok-at:7' \
  "Script: i2.t" "                                   "
at_xfail=no
(
  $as_echo "20. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-i2 <<_ATEOF_ED
H
r ../../i2.d
$(test -s ../../i2.t &&
cat ../../i2.t ||
echo "w i2.o")
wq i2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/i2.ok-at:20: ed -f script-i2 &&
cmp ../../i2.r i2.o"
at_fn_check_prepare_notrace 'an embedded newline' "i2.ok-at:20"
( $at_check_trace; ed -f script-i2 &&
cmp ../../i2.r i2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/i2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_20
#AT_START_21
at_fn_group_banner 21 'j.ok-at:7' \
  "Script: j.t" "                                    "
at_xfail=no
(
  $as_echo "21. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-j <<_ATEOF_ED
H
r ../../j.d
$(test -s ../../j.t &&
cat ../../j.t ||
echo "w j.o")
wq j.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/j.ok-at:20: ed -f script-j &&
cmp ../../j.r j.o"
at_fn_check_prepare_notrace 'an embedded newline' "j.ok-at:20"
( $at_check_trace; ed -f script-j &&
cmp ../../j.r j.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/j.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_21
#AT_START_22
at_fn_group_banner 22 'k.ok-at:7' \
  "Script: k.t" "                                    "
at_xfail=no
(
  $as_echo "22. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k <<_ATEOF_ED
H
r ../../k.d
$(test -s ../../k.t &&
cat ../../k.t ||
echo "w k.o")
wq k.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k.ok-at:20: ed -f script-k &&
cmp ../../k.r k.o"
at_fn_check_prepare_notrace 'an embedded newline' "k.ok-at:20"
( $at_check_trace; ed -f script-k &&
cmp ../../k.r k.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_22
#AT_START_23
at_fn_group_banner 23 'l.ok-at:7' \
  "Script: l.t" "                                    "
at_xfail=no
(
  $as_echo "23. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-l <<_ATEOF_ED
H
r ../../l.d
$(test -s ../../l.t &&
cat ../../l.t ||
echo "w l.o")
wq l.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/l.ok-at:20: ed -f script-l &&
cmp ../../l.r l.o"
at_fn_check_prepare_notrace 'an embedded newline' "l.ok-at:20"
( $at_check_trace; ed -f script-l &&
cmp ../../l.r l.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/l.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_23
#AT_START_24
at_fn_group_banner 24 'm.ok-at:7' \
  "Script: m.t" "                                    "
at_xfail=no
(
  $as_echo "24. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-m <<_ATEOF_ED
H
r ../../m.d
$(test -s ../../m.t &&
cat ../../m.t ||
echo "w m.o")
wq m.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/m.ok-at:20: ed -f script-m &&
cmp ../../m.r m.o"
at_fn_check_prepare_notrace 'an embedded newline' "m.ok-at:20"
( $at_check_trace; ed -f script-m &&
cmp ../../m.r m.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/m.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_24
#AT_START_25
at_fn_group_banner 25 'n.ok-at:7' \
  "Script: n.t" "                                    "
at_xfail=no
(
  $as_echo "25. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-n <<_ATEOF_ED
H
r ../../n.d
$(test -s ../../n.t &&
cat ../../n.t ||
echo "w n.o")
wq n.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/n.ok-at:20: ed -f script-n &&
cmp ../../n.r n.o"
at_fn_check_prepare_notrace 'an embedded newline' "n.ok-at:20"
( $at_check_trace; ed -f script-n &&
cmp ../../n.r n.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/n.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_25
#AT_START_26
at_fn_group_banner 26 'nl1.ok-at:7' \
  "Script: nl1.t" "                                  "
at_xfail=no
(
  $as_echo "26. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-nl1 <<_ATEOF_ED
H
r ../../nl1.d
$(test -s ../../nl1.t &&
cat ../../nl1.t ||
echo "w nl1.o")
wq nl1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/nl1.ok-at:20: ed -f script-nl1 &&
cmp ../../nl1.r nl1.o"
at_fn_check_prepare_notrace 'an embedded newline' "nl1.ok-at:20"
( $at_check_trace; ed -f script-nl1 &&
cmp ../../nl1.r nl1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/nl1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_26
#AT_START_27
at_fn_group_banner 27 'nl2.ok-at:7' \
  "Script: nl2.t" "                                  "
at_xfail=no
(
  $as_echo "27. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-nl2 <<_ATEOF_ED
H
r ../../nl2.d
$(test -s ../../nl2.t &&
cat ../../nl2.t ||
echo "w nl2.o")
wq nl2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/nl2.ok-at:20: ed -f script-nl2 &&
cmp ../../nl2.r nl2.o"
at_fn_check_prepare_notrace 'an embedded newline' "nl2.ok-at:20"
( $at_check_trace; ed -f script-nl2 &&
cmp ../../nl2.r nl2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/nl2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_27
#AT_START_28
at_fn_group_banner 28 'nl3.ok-at:7' \
  "Script: nl3.t" "                                  "
at_xfail=no
(
  $as_echo "28. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-nl3 <<_ATEOF_ED
H
r ../../nl3.d
$(test -s ../../nl3.t &&
cat ../../nl3.t ||
echo "w nl3.o")
wq nl3.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/nl3.ok-at:20: ed -f script-nl3 &&
cmp ../../nl3.r nl3.o"
at_fn_check_prepare_notrace 'an embedded newline' "nl3.ok-at:20"
( $at_check_trace; ed -f script-nl3 &&
cmp ../../nl3.r nl3.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/nl3.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_28
#AT_START_29
at_fn_group_banner 29 'nl4.ok-at:7' \
  "Script: nl4.t" "                                  "
at_xfail=no
(
  $as_echo "29. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-nl4 <<_ATEOF_ED
H
r ../../nl4.d
$(test -s ../../nl4.t &&
cat ../../nl4.t ||
echo "w nl4.o")
wq nl4.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/nl4.ok-at:20: ed -f script-nl4 &&
cmp ../../nl4.r nl4.o"
at_fn_check_prepare_notrace 'an embedded newline' "nl4.ok-at:20"
( $at_check_trace; ed -f script-nl4 &&
cmp ../../nl4.r nl4.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/nl4.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_29
#AT_START_30
at_fn_group_banner 30 'p.ok-at:7' \
  "Script: p.t" "                                    "
at_xfail=no
(
  $as_echo "30. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-p <<_ATEOF_ED
H
r ../../p.d
$(test -s ../../p.t &&
cat ../../p.t ||
echo "w p.o")
wq p.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/p.ok-at:20: ed -f script-p &&
cmp ../../p.r p.o"
at_fn_check_prepare_notrace 'an embedded newline' "p.ok-at:20"
( $at_check_trace; ed -f script-p &&
cmp ../../p.r p.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/p.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_30
#AT_START_31
at_fn_group_banner 31 'q2.ok-at:7' \
  "Script: q2.t" "                                   "
at_xfail=no
(
  $as_echo "31. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-q2 <<_ATEOF_ED
H
r ../../q2.d
$(test -s ../../q2.t &&
cat ../../q2.t ||
echo "w q2.o")
wq q2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/q2.ok-at:20: ed -f script-q2 &&
cmp ../../q2.r q2.o"
at_fn_check_prepare_notrace 'an embedded newline' "q2.ok-at:20"
( $at_check_trace; ed -f script-q2 &&
cmp ../../q2.r q2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/q2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_31
#AT_START_32
at_fn_group_banner 32 'r1.ok-at:7' \
  "Script: r1.t" "                                   "
at_xfail=no
(
  $as_echo "32. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-r1 <<_ATEOF_ED
H
r ../../r1.d
$(test -s ../../r1.t &&
cat ../../r1.t ||
echo "w r1.o")
wq r1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/r1.ok-at:20: ed -f script-r1 &&
cmp ../../r1.r r1.o"
at_fn_check_prepare_notrace 'an embedded newline' "r1.ok-at:20"
( $at_check_trace; ed -f script-r1 &&
cmp ../../r1.r r1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/r1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_32
#AT_START_33
at_fn_group_banner 33 'r2.ok-at:7' \
  "Script: r2.t" "                                   "
at_xfail=no
(
  $as_echo "33. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-r2 <<_ATEOF_ED
H
r ../../r2.d
$(test -s ../../r2.t &&
cat ../../r2.t ||
echo "w r2.o")
wq r2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/r2.ok-at:20: ed -f script-r2 &&
cmp ../../r2.r r2.o"
at_fn_check_prepare_notrace 'an embedded newline' "r2.ok-at:20"
( $at_check_trace; ed -f script-r2 &&
cmp ../../r2.r r2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/r2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_33
#AT_START_34
at_fn_group_banner 34 'r3.ok-at:7' \
  "Script: r3.t" "                                   "
at_xfail=no
(
  $as_echo "34. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-r3 <<_ATEOF_ED
H
r ../../r3.d
$(test -s ../../r3.t &&
cat ../../r3.t ||
echo "w r3.o")
wq r3.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/r3.ok-at:20: ed -f script-r3 &&
cmp ../../r3.r r3.o"
at_fn_check_prepare_notrace 'an embedded newline' "r3.ok-at:20"
( $at_check_trace; ed -f script-r3 &&
cmp ../../r3.r r3.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/r3.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_34
#AT_START_35
at_fn_group_banner 35 's1.ok-at:7' \
  "Script: s1.t" "                                   "
at_xfail=no
(
  $as_echo "35. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s1 <<_ATEOF_ED
H
r ../../s1.d
$(test -s ../../s1.t &&
cat ../../s1.t ||
echo "w s1.o")
wq s1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s1.ok-at:20: ed -f script-s1 &&
cmp ../../s1.r s1.o"
at_fn_check_prepare_notrace 'an embedded newline' "s1.ok-at:20"
( $at_check_trace; ed -f script-s1 &&
cmp ../../s1.r s1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_35
#AT_START_36
at_fn_group_banner 36 's2.ok-at:7' \
  "Script: s2.t" "                                   "
at_xfail=no
(
  $as_echo "36. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s2 <<_ATEOF_ED
H
r ../../s2.d
$(test -s ../../s2.t &&
cat ../../s2.t ||
echo "w s2.o")
wq s2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s2.ok-at:20: ed -f script-s2 &&
cmp ../../s2.r s2.o"
at_fn_check_prepare_notrace 'an embedded newline' "s2.ok-at:20"
( $at_check_trace; ed -f script-s2 &&
cmp ../../s2.r s2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_36
#AT_START_37
at_fn_group_banner 37 's3.ok-at:7' \
  "Script: s3.t" "                                   "
at_xfail=no
(
  $as_echo "37. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s3 <<_ATEOF_ED
H
r ../../s3.d
$(test -s ../../s3.t &&
cat ../../s3.t ||
echo "w s3.o")
wq s3.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s3.ok-at:20: ed -f script-s3 &&
cmp ../../s3.r s3.o"
at_fn_check_prepare_notrace 'an embedded newline' "s3.ok-at:20"
( $at_check_trace; ed -f script-s3 &&
cmp ../../s3.r s3.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s3.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_37
#AT_START_38
at_fn_group_banner 38 's4.ok-at:7' \
  "Script: s4.t" "                                   "
at_xfail=no
(
  $as_echo "38. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s4 <<_ATEOF_ED
H
r ../../s4.d
$(test -s ../../s4.t &&
cat ../../s4.t ||
echo "w s4.o")
wq s4.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s4.ok-at:20: ed -f script-s4 &&
cmp ../../s4.r s4.o"
at_fn_check_prepare_notrace 'an embedded newline' "s4.ok-at:20"
( $at_check_trace; ed -f script-s4 &&
cmp ../../s4.r s4.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s4.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_38
#AT_START_39
at_fn_group_banner 39 's5.ok-at:7' \
  "Script: s5.t" "                                   "
at_xfail=no
(
  $as_echo "39. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s5 <<_ATEOF_ED
H
r ../../s5.d
$(test -s ../../s5.t &&
cat ../../s5.t ||
echo "w s5.o")
wq s5.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s5.ok-at:20: ed -f script-s5 &&
cmp ../../s5.r s5.o"
at_fn_check_prepare_notrace 'an embedded newline' "s5.ok-at:20"
( $at_check_trace; ed -f script-s5 &&
cmp ../../s5.r s5.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s5.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_39
#AT_START_40
at_fn_group_banner 40 's6.ok-at:7' \
  "Script: s6.t" "                                   "
at_xfail=no
(
  $as_echo "40. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s6 <<_ATEOF_ED
H
r ../../s6.d
$(test -s ../../s6.t &&
cat ../../s6.t ||
echo "w s6.o")
wq s6.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s6.ok-at:20: ed -f script-s6 &&
cmp ../../s6.r s6.o"
at_fn_check_prepare_notrace 'an embedded newline' "s6.ok-at:20"
( $at_check_trace; ed -f script-s6 &&
cmp ../../s6.r s6.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s6.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_40
#AT_START_41
at_fn_group_banner 41 't1.ok-at:7' \
  "Script: t1.t" "                                   "
at_xfail=no
(
  $as_echo "41. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-t1 <<_ATEOF_ED
H
r ../../t1.d
$(test -s ../../t1.t &&
cat ../../t1.t ||
echo "w t1.o")
wq t1.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/t1.ok-at:20: ed -f script-t1 &&
cmp ../../t1.r t1.o"
at_fn_check_prepare_notrace 'an embedded newline' "t1.ok-at:20"
( $at_check_trace; ed -f script-t1 &&
cmp ../../t1.r t1.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/t1.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_41
#AT_START_42
at_fn_group_banner 42 't2.ok-at:7' \
  "Script: t2.t" "                                   "
at_xfail=no
(
  $as_echo "42. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-t2 <<_ATEOF_ED
H
r ../../t2.d
$(test -s ../../t2.t &&
cat ../../t2.t ||
echo "w t2.o")
wq t2.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/t2.ok-at:20: ed -f script-t2 &&
cmp ../../t2.r t2.o"
at_fn_check_prepare_notrace 'an embedded newline' "t2.ok-at:20"
( $at_check_trace; ed -f script-t2 &&
cmp ../../t2.r t2.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/t2.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_42
#AT_START_43
at_fn_group_banner 43 'u.ok-at:7' \
  "Script: u.t" "                                    "
at_xfail=no
(
  $as_echo "43. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-u <<_ATEOF_ED
H
r ../../u.d
$(test -s ../../u.t &&
cat ../../u.t ||
echo "w u.o")
wq u.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/u.ok-at:20: ed -f script-u &&
cmp ../../u.r u.o"
at_fn_check_prepare_notrace 'an embedded newline' "u.ok-at:20"
( $at_check_trace; ed -f script-u &&
cmp ../../u.r u.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/u.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_43
#AT_START_44
at_fn_group_banner 44 'v.ok-at:7' \
  "Script: v.t" "                                    "
at_xfail=no
(
  $as_echo "44. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-v <<_ATEOF_ED
H
r ../../v.d
$(test -s ../../v.t &&
cat ../../v.t ||
echo "w v.o")
wq v.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/v.ok-at:20: ed -f script-v &&
cmp ../../v.r v.o"
at_fn_check_prepare_notrace 'an embedded newline' "v.ok-at:20"
( $at_check_trace; ed -f script-v &&
cmp ../../v.r v.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/v.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_44
#AT_START_45
at_fn_group_banner 45 'w.ok-at:7' \
  "Script: w.t" "                                    "
at_xfail=no
(
  $as_echo "45. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w <<_ATEOF_ED
H
r ../../w.d
$(test -s ../../w.t &&
cat ../../w.t ||
echo "w w.o")
wq w.o
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w.ok-at:20: ed -f script-w &&
cmp ../../w.r w.o"
at_fn_check_prepare_notrace 'an embedded newline' "w.ok-at:20"
( $at_check_trace; ed -f script-w &&
cmp ../../w.r w.o
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w.ok-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_45
#AT_START_46
at_fn_group_banner 46 'a2.err-at:7' \
  "Pipe: a2.err" "                                   "
at_xfail=no
(
  $as_echo "46. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-a2 <<_ATEOF_ED
H
r ../../a2.err
$(test -s ../../a2.err &&
cat ../../a2.err ||
echo "a2")
w a2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/a2.err-at:20: cat script-a2 | ed - && exit 255 ||
cmp ../../a2.rr a2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "a2.err-at:20"
( $at_check_trace; cat script-a2 | ed - && exit 255 ||
cmp ../../a2.rr a2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/a2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_46
#AT_START_47
at_fn_group_banner 47 'addr1.err-at:7' \
  "Pipe: addr1.err" "                                "
at_xfail=no
(
  $as_echo "47. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-addr1 <<_ATEOF_ED
H
r ../../addr1.err
$(test -s ../../addr1.err &&
cat ../../addr1.err ||
echo "addr1")
w addr1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/addr1.err-at:20: cat script-addr1 | ed - && exit 255 ||
cmp ../../addr1.rr addr1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "addr1.err-at:20"
( $at_check_trace; cat script-addr1 | ed - && exit 255 ||
cmp ../../addr1.rr addr1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/addr1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_47
#AT_START_48
at_fn_group_banner 48 'addr2.err-at:7' \
  "Pipe: addr2.err" "                                "
at_xfail=no
(
  $as_echo "48. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-addr2 <<_ATEOF_ED
H
r ../../addr2.err
$(test -s ../../addr2.err &&
cat ../../addr2.err ||
echo "addr2")
w addr2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/addr2.err-at:20: cat script-addr2 | ed - && exit 255 ||
cmp ../../addr2.rr addr2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "addr2.err-at:20"
( $at_check_trace; cat script-addr2 | ed - && exit 255 ||
cmp ../../addr2.rr addr2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/addr2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_48
#AT_START_49
at_fn_group_banner 49 'bang1.err-at:7' \
  "Pipe: bang1.err" "                                "
at_xfail=no
(
  $as_echo "49. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-bang1 <<_ATEOF_ED
H
r ../../bang1.err
$(test -s ../../bang1.err &&
cat ../../bang1.err ||
echo "bang1")
w bang1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/bang1.err-at:20: cat script-bang1 | ed - && exit 255 ||
cmp ../../bang1.rr bang1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "bang1.err-at:20"
( $at_check_trace; cat script-bang1 | ed - && exit 255 ||
cmp ../../bang1.rr bang1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bang1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_49
#AT_START_50
at_fn_group_banner 50 'c1.err-at:7' \
  "Pipe: c1.err" "                                   "
at_xfail=no
(
  $as_echo "50. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-c1 <<_ATEOF_ED
H
r ../../c1.err
$(test -s ../../c1.err &&
cat ../../c1.err ||
echo "c1")
w c1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/c1.err-at:20: cat script-c1 | ed - && exit 255 ||
cmp ../../c1.rr c1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "c1.err-at:20"
( $at_check_trace; cat script-c1 | ed - && exit 255 ||
cmp ../../c1.rr c1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/c1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_50
#AT_START_51
at_fn_group_banner 51 'd.err-at:7' \
  "Pipe: d.err" "                                    "
at_xfail=no
(
  $as_echo "51. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-d <<_ATEOF_ED
H
r ../../d.err
$(test -s ../../d.err &&
cat ../../d.err ||
echo "d")
w d.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/d.err-at:20: cat script-d | ed - && exit 255 ||
cmp ../../d.rr d.ro"
at_fn_check_prepare_notrace 'an embedded newline' "d.err-at:20"
( $at_check_trace; cat script-d | ed - && exit 255 ||
cmp ../../d.rr d.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/d.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_51
#AT_START_52
at_fn_group_banner 52 'e1.err-at:7' \
  "Pipe: e1.err" "                                   "
at_xfail=no
(
  $as_echo "52. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e1 <<_ATEOF_ED
H
r ../../e1.err
$(test -s ../../e1.err &&
cat ../../e1.err ||
echo "e1")
w e1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e1.err-at:20: cat script-e1 | ed - && exit 255 ||
cmp ../../e1.rr e1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "e1.err-at:20"
( $at_check_trace; cat script-e1 | ed - && exit 255 ||
cmp ../../e1.rr e1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_52
#AT_START_53
at_fn_group_banner 53 'e2.err-at:7' \
  "Pipe: e2.err" "                                   "
at_xfail=no
(
  $as_echo "53. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e2 <<_ATEOF_ED
H
r ../../e2.err
$(test -s ../../e2.err &&
cat ../../e2.err ||
echo "e2")
w e2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e2.err-at:20: cat script-e2 | ed - && exit 255 ||
cmp ../../e2.rr e2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "e2.err-at:20"
( $at_check_trace; cat script-e2 | ed - && exit 255 ||
cmp ../../e2.rr e2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_53
#AT_START_54
at_fn_group_banner 54 'e3.err-at:7' \
  "Pipe: e3.err" "                                   "
at_xfail=no
(
  $as_echo "54. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e3 <<_ATEOF_ED
H
r ../../e3.err
$(test -s ../../e3.err &&
cat ../../e3.err ||
echo "e3")
w e3.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e3.err-at:20: cat script-e3 | ed - && exit 255 ||
cmp ../../e3.rr e3.ro"
at_fn_check_prepare_notrace 'an embedded newline' "e3.err-at:20"
( $at_check_trace; cat script-e3 | ed - && exit 255 ||
cmp ../../e3.rr e3.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e3.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_54
#AT_START_55
at_fn_group_banner 55 'f1.err-at:7' \
  "Pipe: f1.err" "                                   "
at_xfail=no
(
  $as_echo "55. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-f1 <<_ATEOF_ED
H
r ../../f1.err
$(test -s ../../f1.err &&
cat ../../f1.err ||
echo "f1")
w f1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/f1.err-at:20: cat script-f1 | ed - && exit 255 ||
cmp ../../f1.rr f1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "f1.err-at:20"
( $at_check_trace; cat script-f1 | ed - && exit 255 ||
cmp ../../f1.rr f1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/f1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_55
#AT_START_56
at_fn_group_banner 56 'f2.err-at:7' \
  "Pipe: f2.err" "                                   "
at_xfail=no
(
  $as_echo "56. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-f2 <<_ATEOF_ED
H
r ../../f2.err
$(test -s ../../f2.err &&
cat ../../f2.err ||
echo "f2")
w f2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/f2.err-at:20: cat script-f2 | ed - && exit 255 ||
cmp ../../f2.rr f2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "f2.err-at:20"
( $at_check_trace; cat script-f2 | ed - && exit 255 ||
cmp ../../f2.rr f2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/f2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_56
#AT_START_57
at_fn_group_banner 57 'g1.err-at:7' \
  "Pipe: g1.err" "                                   "
at_xfail=no
(
  $as_echo "57. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g1 <<_ATEOF_ED
H
r ../../g1.err
$(test -s ../../g1.err &&
cat ../../g1.err ||
echo "g1")
w g1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g1.err-at:20: cat script-g1 | ed - && exit 255 ||
cmp ../../g1.rr g1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "g1.err-at:20"
( $at_check_trace; cat script-g1 | ed - && exit 255 ||
cmp ../../g1.rr g1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_57
#AT_START_58
at_fn_group_banner 58 'g2.err-at:7' \
  "Pipe: g2.err" "                                   "
at_xfail=no
(
  $as_echo "58. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g2 <<_ATEOF_ED
H
r ../../g2.err
$(test -s ../../g2.err &&
cat ../../g2.err ||
echo "g2")
w g2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g2.err-at:20: cat script-g2 | ed - && exit 255 ||
cmp ../../g2.rr g2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "g2.err-at:20"
( $at_check_trace; cat script-g2 | ed - && exit 255 ||
cmp ../../g2.rr g2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_58
#AT_START_59
at_fn_group_banner 59 'g3.err-at:7' \
  "Pipe: g3.err" "                                   "
at_xfail=no
(
  $as_echo "59. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g3 <<_ATEOF_ED
H
r ../../g3.err
$(test -s ../../g3.err &&
cat ../../g3.err ||
echo "g3")
w g3.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g3.err-at:20: cat script-g3 | ed - && exit 255 ||
cmp ../../g3.rr g3.ro"
at_fn_check_prepare_notrace 'an embedded newline' "g3.err-at:20"
( $at_check_trace; cat script-g3 | ed - && exit 255 ||
cmp ../../g3.rr g3.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g3.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_59
#AT_START_60
at_fn_group_banner 60 'h.err-at:7' \
  "Pipe: h.err" "                                    "
at_xfail=no
(
  $as_echo "60. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-h <<_ATEOF_ED
H
r ../../h.err
$(test -s ../../h.err &&
cat ../../h.err ||
echo "h")
w h.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/h.err-at:20: cat script-h | ed - && exit 255 ||
cmp ../../h.rr h.ro"
at_fn_check_prepare_notrace 'an embedded newline' "h.err-at:20"
( $at_check_trace; cat script-h | ed - && exit 255 ||
cmp ../../h.rr h.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/h.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_60
#AT_START_61
at_fn_group_banner 61 'i2.err-at:7' \
  "Pipe: i2.err" "                                   "
at_xfail=no
(
  $as_echo "61. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-i2 <<_ATEOF_ED
H
r ../../i2.err
$(test -s ../../i2.err &&
cat ../../i2.err ||
echo "i2")
w i2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/i2.err-at:20: cat script-i2 | ed - && exit 255 ||
cmp ../../i2.rr i2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "i2.err-at:20"
( $at_check_trace; cat script-i2 | ed - && exit 255 ||
cmp ../../i2.rr i2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/i2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_61
#AT_START_62
at_fn_group_banner 62 'k2.err-at:7' \
  "Pipe: k2.err" "                                   "
at_xfail=no
(
  $as_echo "62. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k2 <<_ATEOF_ED
H
r ../../k2.err
$(test -s ../../k2.err &&
cat ../../k2.err ||
echo "k2")
w k2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k2.err-at:20: cat script-k2 | ed - && exit 255 ||
cmp ../../k2.rr k2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "k2.err-at:20"
( $at_check_trace; cat script-k2 | ed - && exit 255 ||
cmp ../../k2.rr k2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_62
#AT_START_63
at_fn_group_banner 63 'k3.err-at:7' \
  "Pipe: k3.err" "                                   "
at_xfail=no
(
  $as_echo "63. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k3 <<_ATEOF_ED
H
r ../../k3.err
$(test -s ../../k3.err &&
cat ../../k3.err ||
echo "k3")
w k3.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k3.err-at:20: cat script-k3 | ed - && exit 255 ||
cmp ../../k3.rr k3.ro"
at_fn_check_prepare_notrace 'an embedded newline' "k3.err-at:20"
( $at_check_trace; cat script-k3 | ed - && exit 255 ||
cmp ../../k3.rr k3.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k3.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_63
#AT_START_64
at_fn_group_banner 64 'k4.err-at:7' \
  "Pipe: k4.err" "                                   "
at_xfail=no
(
  $as_echo "64. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k4 <<_ATEOF_ED
H
r ../../k4.err
$(test -s ../../k4.err &&
cat ../../k4.err ||
echo "k4")
w k4.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k4.err-at:20: cat script-k4 | ed - && exit 255 ||
cmp ../../k4.rr k4.ro"
at_fn_check_prepare_notrace 'an embedded newline' "k4.err-at:20"
( $at_check_trace; cat script-k4 | ed - && exit 255 ||
cmp ../../k4.rr k4.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k4.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_64
#AT_START_65
at_fn_group_banner 65 'm.err-at:7' \
  "Pipe: m.err" "                                    "
at_xfail=no
(
  $as_echo "65. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-m <<_ATEOF_ED
H
r ../../m.err
$(test -s ../../m.err &&
cat ../../m.err ||
echo "m")
w m.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/m.err-at:20: cat script-m | ed - && exit 255 ||
cmp ../../m.rr m.ro"
at_fn_check_prepare_notrace 'an embedded newline' "m.err-at:20"
( $at_check_trace; cat script-m | ed - && exit 255 ||
cmp ../../m.rr m.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/m.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_65
#AT_START_66
at_fn_group_banner 66 'q1.err-at:7' \
  "Pipe: q1.err" "                                   "
at_xfail=no
(
  $as_echo "66. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-q1 <<_ATEOF_ED
H
r ../../q1.err
$(test -s ../../q1.err &&
cat ../../q1.err ||
echo "q1")
w q1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/q1.err-at:20: cat script-q1 | ed - && exit 255 ||
cmp ../../q1.rr q1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "q1.err-at:20"
( $at_check_trace; cat script-q1 | ed - && exit 255 ||
cmp ../../q1.rr q1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/q1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_66
#AT_START_67
at_fn_group_banner 67 'r2.err-at:7' \
  "Pipe: r2.err" "                                   "
at_xfail=no
(
  $as_echo "67. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-r2 <<_ATEOF_ED
H
r ../../r2.err
$(test -s ../../r2.err &&
cat ../../r2.err ||
echo "r2")
w r2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/r2.err-at:20: cat script-r2 | ed - && exit 255 ||
cmp ../../r2.rr r2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "r2.err-at:20"
( $at_check_trace; cat script-r2 | ed - && exit 255 ||
cmp ../../r2.rr r2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/r2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_67
#AT_START_68
at_fn_group_banner 68 's1.err-at:7' \
  "Pipe: s1.err" "                                   "
at_xfail=no
(
  $as_echo "68. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s1 <<_ATEOF_ED
H
r ../../s1.err
$(test -s ../../s1.err &&
cat ../../s1.err ||
echo "s1")
w s1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s1.err-at:20: cat script-s1 | ed - && exit 255 ||
cmp ../../s1.rr s1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s1.err-at:20"
( $at_check_trace; cat script-s1 | ed - && exit 255 ||
cmp ../../s1.rr s1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_68
#AT_START_69
at_fn_group_banner 69 's10.err-at:7' \
  "Pipe: s10.err" "                                  "
at_xfail=no
(
  $as_echo "69. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s10 <<_ATEOF_ED
H
r ../../s10.err
$(test -s ../../s10.err &&
cat ../../s10.err ||
echo "s10")
w s10.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s10.err-at:20: cat script-s10 | ed - && exit 255 ||
cmp ../../s10.rr s10.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s10.err-at:20"
( $at_check_trace; cat script-s10 | ed - && exit 255 ||
cmp ../../s10.rr s10.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s10.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_69
#AT_START_70
at_fn_group_banner 70 's3.err-at:7' \
  "Pipe: s3.err" "                                   "
at_xfail=no
(
  $as_echo "70. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s3 <<_ATEOF_ED
H
r ../../s3.err
$(test -s ../../s3.err &&
cat ../../s3.err ||
echo "s3")
w s3.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s3.err-at:20: cat script-s3 | ed - && exit 255 ||
cmp ../../s3.rr s3.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s3.err-at:20"
( $at_check_trace; cat script-s3 | ed - && exit 255 ||
cmp ../../s3.rr s3.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s3.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_70
#AT_START_71
at_fn_group_banner 71 's4.err-at:7' \
  "Pipe: s4.err" "                                   "
at_xfail=no
(
  $as_echo "71. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s4 <<_ATEOF_ED
H
r ../../s4.err
$(test -s ../../s4.err &&
cat ../../s4.err ||
echo "s4")
w s4.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s4.err-at:20: cat script-s4 | ed - && exit 255 ||
cmp ../../s4.rr s4.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s4.err-at:20"
( $at_check_trace; cat script-s4 | ed - && exit 255 ||
cmp ../../s4.rr s4.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s4.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_71
#AT_START_72
at_fn_group_banner 72 's5.err-at:7' \
  "Pipe: s5.err" "                                   "
at_xfail=no
(
  $as_echo "72. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s5 <<_ATEOF_ED
H
r ../../s5.err
$(test -s ../../s5.err &&
cat ../../s5.err ||
echo "s5")
w s5.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s5.err-at:20: cat script-s5 | ed - && exit 255 ||
cmp ../../s5.rr s5.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s5.err-at:20"
( $at_check_trace; cat script-s5 | ed - && exit 255 ||
cmp ../../s5.rr s5.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s5.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_72
#AT_START_73
at_fn_group_banner 73 's6.err-at:7' \
  "Pipe: s6.err" "                                   "
at_xfail=no
(
  $as_echo "73. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s6 <<_ATEOF_ED
H
r ../../s6.err
$(test -s ../../s6.err &&
cat ../../s6.err ||
echo "s6")
w s6.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s6.err-at:20: cat script-s6 | ed - && exit 255 ||
cmp ../../s6.rr s6.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s6.err-at:20"
( $at_check_trace; cat script-s6 | ed - && exit 255 ||
cmp ../../s6.rr s6.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s6.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_73
#AT_START_74
at_fn_group_banner 74 's7.err-at:7' \
  "Pipe: s7.err" "                                   "
at_xfail=no
(
  $as_echo "74. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s7 <<_ATEOF_ED
H
r ../../s7.err
$(test -s ../../s7.err &&
cat ../../s7.err ||
echo "s7")
w s7.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s7.err-at:20: cat script-s7 | ed - && exit 255 ||
cmp ../../s7.rr s7.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s7.err-at:20"
( $at_check_trace; cat script-s7 | ed - && exit 255 ||
cmp ../../s7.rr s7.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s7.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_74
#AT_START_75
at_fn_group_banner 75 's8.err-at:7' \
  "Pipe: s8.err" "                                   "
at_xfail=no
(
  $as_echo "75. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s8 <<_ATEOF_ED
H
r ../../s8.err
$(test -s ../../s8.err &&
cat ../../s8.err ||
echo "s8")
w s8.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s8.err-at:20: cat script-s8 | ed - && exit 255 ||
cmp ../../s8.rr s8.ro"
at_fn_check_prepare_notrace 'an embedded newline' "s8.err-at:20"
( $at_check_trace; cat script-s8 | ed - && exit 255 ||
cmp ../../s8.rr s8.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s8.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_75
#AT_START_76
at_fn_group_banner 76 't1.err-at:7' \
  "Pipe: t1.err" "                                   "
at_xfail=no
(
  $as_echo "76. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-t1 <<_ATEOF_ED
H
r ../../t1.err
$(test -s ../../t1.err &&
cat ../../t1.err ||
echo "t1")
w t1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/t1.err-at:20: cat script-t1 | ed - && exit 255 ||
cmp ../../t1.rr t1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "t1.err-at:20"
( $at_check_trace; cat script-t1 | ed - && exit 255 ||
cmp ../../t1.rr t1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/t1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_76
#AT_START_77
at_fn_group_banner 77 't2.err-at:7' \
  "Pipe: t2.err" "                                   "
at_xfail=no
(
  $as_echo "77. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-t2 <<_ATEOF_ED
H
r ../../t2.err
$(test -s ../../t2.err &&
cat ../../t2.err ||
echo "t2")
w t2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/t2.err-at:20: cat script-t2 | ed - && exit 255 ||
cmp ../../t2.rr t2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "t2.err-at:20"
( $at_check_trace; cat script-t2 | ed - && exit 255 ||
cmp ../../t2.rr t2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/t2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_77
#AT_START_78
at_fn_group_banner 78 'u.err-at:7' \
  "Pipe: u.err" "                                    "
at_xfail=no
(
  $as_echo "78. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-u <<_ATEOF_ED
H
r ../../u.err
$(test -s ../../u.err &&
cat ../../u.err ||
echo "u")
w u.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/u.err-at:20: cat script-u | ed - && exit 255 ||
cmp ../../u.rr u.ro"
at_fn_check_prepare_notrace 'an embedded newline' "u.err-at:20"
( $at_check_trace; cat script-u | ed - && exit 255 ||
cmp ../../u.rr u.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/u.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_78
#AT_START_79
at_fn_group_banner 79 'w1.err-at:7' \
  "Pipe: w1.err" "                                   "
at_xfail=no
(
  $as_echo "79. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w1 <<_ATEOF_ED
H
r ../../w1.err
$(test -s ../../w1.err &&
cat ../../w1.err ||
echo "w1")
w w1.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w1.err-at:20: cat script-w1 | ed - && exit 255 ||
cmp ../../w1.rr w1.ro"
at_fn_check_prepare_notrace 'an embedded newline' "w1.err-at:20"
( $at_check_trace; cat script-w1 | ed - && exit 255 ||
cmp ../../w1.rr w1.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w1.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_79
#AT_START_80
at_fn_group_banner 80 'w2.err-at:7' \
  "Pipe: w2.err" "                                   "
at_xfail=no
(
  $as_echo "80. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w2 <<_ATEOF_ED
H
r ../../w2.err
$(test -s ../../w2.err &&
cat ../../w2.err ||
echo "w2")
w w2.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w2.err-at:20: cat script-w2 | ed - && exit 255 ||
cmp ../../w2.rr w2.ro"
at_fn_check_prepare_notrace 'an embedded newline' "w2.err-at:20"
( $at_check_trace; cat script-w2 | ed - && exit 255 ||
cmp ../../w2.rr w2.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w2.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_80
#AT_START_81
at_fn_group_banner 81 'w3.err-at:7' \
  "Pipe: w3.err" "                                   "
at_xfail=no
(
  $as_echo "81. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w3 <<_ATEOF_ED
H
r ../../w3.err
$(test -s ../../w3.err &&
cat ../../w3.err ||
echo "w3")
w w3.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w3.err-at:20: cat script-w3 | ed - && exit 255 ||
cmp ../../w3.rr w3.ro"
at_fn_check_prepare_notrace 'an embedded newline' "w3.err-at:20"
( $at_check_trace; cat script-w3 | ed - && exit 255 ||
cmp ../../w3.rr w3.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w3.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_81
#AT_START_82
at_fn_group_banner 82 'z.err-at:7' \
  "Pipe: z.err" "                                    "
at_xfail=no
(
  $as_echo "82. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-z <<_ATEOF_ED
H
r ../../z.err
$(test -s ../../z.err &&
cat ../../z.err ||
echo "z")
w z.ro
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/z.err-at:20: cat script-z | ed - && exit 255 ||
cmp ../../z.rr z.ro"
at_fn_check_prepare_notrace 'an embedded newline' "z.err-at:20"
( $at_check_trace; cat script-z | ed - && exit 255 ||
cmp ../../z.rr z.ro
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/z.err-at:20"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_82
#AT_START_83
at_fn_group_banner 83 'a2.fail-at:7' \
  "Fail: a2.err" "                                   "
at_xfail=no
(
  $as_echo "83. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-a2 <<_ATEOF_ED
H
r ../../a2.err
$(test -s ../../a2.err &&
cat ../../a2.err ||
echo "w a2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/a2.fail-at:18: ed -f script-a2 && exit 255 || exit 0"
at_fn_check_prepare_trace "a2.fail-at:18"
( $at_check_trace; ed -f script-a2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/a2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_83
#AT_START_84
at_fn_group_banner 84 'addr1.fail-at:7' \
  "Fail: addr1.err" "                                "
at_xfail=no
(
  $as_echo "84. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-addr1 <<_ATEOF_ED
H
r ../../addr1.err
$(test -s ../../addr1.err &&
cat ../../addr1.err ||
echo "w addr1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/addr1.fail-at:18: ed -f script-addr1 && exit 255 || exit 0"
at_fn_check_prepare_trace "addr1.fail-at:18"
( $at_check_trace; ed -f script-addr1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/addr1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_84
#AT_START_85
at_fn_group_banner 85 'addr2.fail-at:7' \
  "Fail: addr2.err" "                                "
at_xfail=no
(
  $as_echo "85. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-addr2 <<_ATEOF_ED
H
r ../../addr2.err
$(test -s ../../addr2.err &&
cat ../../addr2.err ||
echo "w addr2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/addr2.fail-at:18: ed -f script-addr2 && exit 255 || exit 0"
at_fn_check_prepare_trace "addr2.fail-at:18"
( $at_check_trace; ed -f script-addr2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/addr2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_85
#AT_START_86
at_fn_group_banner 86 'bang1.fail-at:7' \
  "Fail: bang1.err" "                                "
at_xfail=no
(
  $as_echo "86. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-bang1 <<_ATEOF_ED
H
r ../../bang1.err
$(test -s ../../bang1.err &&
cat ../../bang1.err ||
echo "w bang1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/bang1.fail-at:18: ed -f script-bang1 && exit 255 || exit 0"
at_fn_check_prepare_trace "bang1.fail-at:18"
( $at_check_trace; ed -f script-bang1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/bang1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_86
#AT_START_87
at_fn_group_banner 87 'c1.fail-at:7' \
  "Fail: c1.err" "                                   "
at_xfail=no
(
  $as_echo "87. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-c1 <<_ATEOF_ED
H
r ../../c1.err
$(test -s ../../c1.err &&
cat ../../c1.err ||
echo "w c1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/c1.fail-at:18: ed -f script-c1 && exit 255 || exit 0"
at_fn_check_prepare_trace "c1.fail-at:18"
( $at_check_trace; ed -f script-c1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/c1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_87
#AT_START_88
at_fn_group_banner 88 'd.fail-at:7' \
  "Fail: d.err" "                                    "
at_xfail=no
(
  $as_echo "88. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-d <<_ATEOF_ED
H
r ../../d.err
$(test -s ../../d.err &&
cat ../../d.err ||
echo "w d.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/d.fail-at:18: ed -f script-d && exit 255 || exit 0"
at_fn_check_prepare_trace "d.fail-at:18"
( $at_check_trace; ed -f script-d && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/d.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_88
#AT_START_89
at_fn_group_banner 89 'e1.fail-at:7' \
  "Fail: e1.err" "                                   "
at_xfail=no
(
  $as_echo "89. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e1 <<_ATEOF_ED
H
r ../../e1.err
$(test -s ../../e1.err &&
cat ../../e1.err ||
echo "w e1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e1.fail-at:18: ed -f script-e1 && exit 255 || exit 0"
at_fn_check_prepare_trace "e1.fail-at:18"
( $at_check_trace; ed -f script-e1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_89
#AT_START_90
at_fn_group_banner 90 'e2.fail-at:7' \
  "Fail: e2.err" "                                   "
at_xfail=no
(
  $as_echo "90. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e2 <<_ATEOF_ED
H
r ../../e2.err
$(test -s ../../e2.err &&
cat ../../e2.err ||
echo "w e2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e2.fail-at:18: ed -f script-e2 && exit 255 || exit 0"
at_fn_check_prepare_trace "e2.fail-at:18"
( $at_check_trace; ed -f script-e2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_90
#AT_START_91
at_fn_group_banner 91 'e3.fail-at:7' \
  "Fail: e3.err" "                                   "
at_xfail=no
(
  $as_echo "91. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-e3 <<_ATEOF_ED
H
r ../../e3.err
$(test -s ../../e3.err &&
cat ../../e3.err ||
echo "w e3.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/e3.fail-at:18: ed -f script-e3 && exit 255 || exit 0"
at_fn_check_prepare_trace "e3.fail-at:18"
( $at_check_trace; ed -f script-e3 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/e3.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_91
#AT_START_92
at_fn_group_banner 92 'f1.fail-at:7' \
  "Fail: f1.err" "                                   "
at_xfail=no
(
  $as_echo "92. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-f1 <<_ATEOF_ED
H
r ../../f1.err
$(test -s ../../f1.err &&
cat ../../f1.err ||
echo "w f1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/f1.fail-at:18: ed -f script-f1 && exit 255 || exit 0"
at_fn_check_prepare_trace "f1.fail-at:18"
( $at_check_trace; ed -f script-f1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/f1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_92
#AT_START_93
at_fn_group_banner 93 'f2.fail-at:7' \
  "Fail: f2.err" "                                   "
at_xfail=no
(
  $as_echo "93. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-f2 <<_ATEOF_ED
H
r ../../f2.err
$(test -s ../../f2.err &&
cat ../../f2.err ||
echo "w f2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/f2.fail-at:18: ed -f script-f2 && exit 255 || exit 0"
at_fn_check_prepare_trace "f2.fail-at:18"
( $at_check_trace; ed -f script-f2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/f2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_93
#AT_START_94
at_fn_group_banner 94 'g1.fail-at:7' \
  "Fail: g1.err" "                                   "
at_xfail=no
(
  $as_echo "94. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g1 <<_ATEOF_ED
H
r ../../g1.err
$(test -s ../../g1.err &&
cat ../../g1.err ||
echo "w g1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g1.fail-at:18: ed -f script-g1 && exit 255 || exit 0"
at_fn_check_prepare_trace "g1.fail-at:18"
( $at_check_trace; ed -f script-g1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_94
#AT_START_95
at_fn_group_banner 95 'g2.fail-at:7' \
  "Fail: g2.err" "                                   "
at_xfail=no
(
  $as_echo "95. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g2 <<_ATEOF_ED
H
r ../../g2.err
$(test -s ../../g2.err &&
cat ../../g2.err ||
echo "w g2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g2.fail-at:18: ed -f script-g2 && exit 255 || exit 0"
at_fn_check_prepare_trace "g2.fail-at:18"
( $at_check_trace; ed -f script-g2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_95
#AT_START_96
at_fn_group_banner 96 'g3.fail-at:7' \
  "Fail: g3.err" "                                   "
at_xfail=no
(
  $as_echo "96. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-g3 <<_ATEOF_ED
H
r ../../g3.err
$(test -s ../../g3.err &&
cat ../../g3.err ||
echo "w g3.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/g3.fail-at:18: ed -f script-g3 && exit 255 || exit 0"
at_fn_check_prepare_trace "g3.fail-at:18"
( $at_check_trace; ed -f script-g3 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/g3.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_96
#AT_START_97
at_fn_group_banner 97 'h.fail-at:7' \
  "Fail: h.err" "                                    "
at_xfail=no
(
  $as_echo "97. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-h <<_ATEOF_ED
H
r ../../h.err
$(test -s ../../h.err &&
cat ../../h.err ||
echo "w h.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/h.fail-at:18: ed -f script-h && exit 255 || exit 0"
at_fn_check_prepare_trace "h.fail-at:18"
( $at_check_trace; ed -f script-h && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/h.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_97
#AT_START_98
at_fn_group_banner 98 'i2.fail-at:7' \
  "Fail: i2.err" "                                   "
at_xfail=no
(
  $as_echo "98. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-i2 <<_ATEOF_ED
H
r ../../i2.err
$(test -s ../../i2.err &&
cat ../../i2.err ||
echo "w i2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/i2.fail-at:18: ed -f script-i2 && exit 255 || exit 0"
at_fn_check_prepare_trace "i2.fail-at:18"
( $at_check_trace; ed -f script-i2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/i2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_98
#AT_START_99
at_fn_group_banner 99 'k2.fail-at:7' \
  "Fail: k2.err" "                                   "
at_xfail=no
(
  $as_echo "99. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k2 <<_ATEOF_ED
H
r ../../k2.err
$(test -s ../../k2.err &&
cat ../../k2.err ||
echo "w k2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k2.fail-at:18: ed -f script-k2 && exit 255 || exit 0"
at_fn_check_prepare_trace "k2.fail-at:18"
( $at_check_trace; ed -f script-k2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_99
#AT_START_100
at_fn_group_banner 100 'k3.fail-at:7' \
  "Fail: k3.err" "                                   "
at_xfail=no
(
  $as_echo "100. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k3 <<_ATEOF_ED
H
r ../../k3.err
$(test -s ../../k3.err &&
cat ../../k3.err ||
echo "w k3.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k3.fail-at:18: ed -f script-k3 && exit 255 || exit 0"
at_fn_check_prepare_trace "k3.fail-at:18"
( $at_check_trace; ed -f script-k3 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k3.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_100
#AT_START_101
at_fn_group_banner 101 'k4.fail-at:7' \
  "Fail: k4.err" "                                   "
at_xfail=no
(
  $as_echo "101. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-k4 <<_ATEOF_ED
H
r ../../k4.err
$(test -s ../../k4.err &&
cat ../../k4.err ||
echo "w k4.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/k4.fail-at:18: ed -f script-k4 && exit 255 || exit 0"
at_fn_check_prepare_trace "k4.fail-at:18"
( $at_check_trace; ed -f script-k4 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/k4.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_101
#AT_START_102
at_fn_group_banner 102 'm.fail-at:7' \
  "Fail: m.err" "                                    "
at_xfail=no
(
  $as_echo "102. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-m <<_ATEOF_ED
H
r ../../m.err
$(test -s ../../m.err &&
cat ../../m.err ||
echo "w m.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/m.fail-at:18: ed -f script-m && exit 255 || exit 0"
at_fn_check_prepare_trace "m.fail-at:18"
( $at_check_trace; ed -f script-m && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/m.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_102
#AT_START_103
at_fn_group_banner 103 'q1.fail-at:7' \
  "Fail: q1.err" "                                   "
at_xfail=no
(
  $as_echo "103. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-q1 <<_ATEOF_ED
H
r ../../q1.err
$(test -s ../../q1.err &&
cat ../../q1.err ||
echo "w q1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/q1.fail-at:18: ed -f script-q1 && exit 255 || exit 0"
at_fn_check_prepare_trace "q1.fail-at:18"
( $at_check_trace; ed -f script-q1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/q1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_103
#AT_START_104
at_fn_group_banner 104 'r2.fail-at:7' \
  "Fail: r2.err" "                                   "
at_xfail=no
(
  $as_echo "104. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-r2 <<_ATEOF_ED
H
r ../../r2.err
$(test -s ../../r2.err &&
cat ../../r2.err ||
echo "w r2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/r2.fail-at:18: ed -f script-r2 && exit 255 || exit 0"
at_fn_check_prepare_trace "r2.fail-at:18"
( $at_check_trace; ed -f script-r2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/r2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_104
#AT_START_105
at_fn_group_banner 105 's1.fail-at:7' \
  "Fail: s1.err" "                                   "
at_xfail=no
(
  $as_echo "105. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s1 <<_ATEOF_ED
H
r ../../s1.err
$(test -s ../../s1.err &&
cat ../../s1.err ||
echo "w s1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s1.fail-at:18: ed -f script-s1 && exit 255 || exit 0"
at_fn_check_prepare_trace "s1.fail-at:18"
( $at_check_trace; ed -f script-s1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_105
#AT_START_106
at_fn_group_banner 106 's10.fail-at:7' \
  "Fail: s10.err" "                                  "
at_xfail=no
(
  $as_echo "106. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s10 <<_ATEOF_ED
H
r ../../s10.err
$(test -s ../../s10.err &&
cat ../../s10.err ||
echo "w s10.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s10.fail-at:18: ed -f script-s10 && exit 255 || exit 0"
at_fn_check_prepare_trace "s10.fail-at:18"
( $at_check_trace; ed -f script-s10 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s10.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_106
#AT_START_107
at_fn_group_banner 107 's3.fail-at:7' \
  "Fail: s3.err" "                                   "
at_xfail=no
(
  $as_echo "107. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s3 <<_ATEOF_ED
H
r ../../s3.err
$(test -s ../../s3.err &&
cat ../../s3.err ||
echo "w s3.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s3.fail-at:18: ed -f script-s3 && exit 255 || exit 0"
at_fn_check_prepare_trace "s3.fail-at:18"
( $at_check_trace; ed -f script-s3 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s3.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_107
#AT_START_108
at_fn_group_banner 108 's4.fail-at:7' \
  "Fail: s4.err" "                                   "
at_xfail=no
(
  $as_echo "108. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s4 <<_ATEOF_ED
H
r ../../s4.err
$(test -s ../../s4.err &&
cat ../../s4.err ||
echo "w s4.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s4.fail-at:18: ed -f script-s4 && exit 255 || exit 0"
at_fn_check_prepare_trace "s4.fail-at:18"
( $at_check_trace; ed -f script-s4 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s4.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_108
#AT_START_109
at_fn_group_banner 109 's5.fail-at:7' \
  "Fail: s5.err" "                                   "
at_xfail=no
(
  $as_echo "109. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s5 <<_ATEOF_ED
H
r ../../s5.err
$(test -s ../../s5.err &&
cat ../../s5.err ||
echo "w s5.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s5.fail-at:18: ed -f script-s5 && exit 255 || exit 0"
at_fn_check_prepare_trace "s5.fail-at:18"
( $at_check_trace; ed -f script-s5 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s5.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_109
#AT_START_110
at_fn_group_banner 110 's6.fail-at:7' \
  "Fail: s6.err" "                                   "
at_xfail=no
(
  $as_echo "110. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s6 <<_ATEOF_ED
H
r ../../s6.err
$(test -s ../../s6.err &&
cat ../../s6.err ||
echo "w s6.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s6.fail-at:18: ed -f script-s6 && exit 255 || exit 0"
at_fn_check_prepare_trace "s6.fail-at:18"
( $at_check_trace; ed -f script-s6 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s6.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_110
#AT_START_111
at_fn_group_banner 111 's7.fail-at:7' \
  "Fail: s7.err" "                                   "
at_xfail=no
(
  $as_echo "111. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s7 <<_ATEOF_ED
H
r ../../s7.err
$(test -s ../../s7.err &&
cat ../../s7.err ||
echo "w s7.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s7.fail-at:18: ed -f script-s7 && exit 255 || exit 0"
at_fn_check_prepare_trace "s7.fail-at:18"
( $at_check_trace; ed -f script-s7 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s7.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_111
#AT_START_112
at_fn_group_banner 112 's8.fail-at:7' \
  "Fail: s8.err" "                                   "
at_xfail=no
(
  $as_echo "112. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-s8 <<_ATEOF_ED
H
r ../../s8.err
$(test -s ../../s8.err &&
cat ../../s8.err ||
echo "w s8.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/s8.fail-at:18: ed -f script-s8 && exit 255 || exit 0"
at_fn_check_prepare_trace "s8.fail-at:18"
( $at_check_trace; ed -f script-s8 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/s8.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_112
#AT_START_113
at_fn_group_banner 113 't1.fail-at:7' \
  "Fail: t1.err" "                                   "
at_xfail=no
(
  $as_echo "113. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-t1 <<_ATEOF_ED
H
r ../../t1.err
$(test -s ../../t1.err &&
cat ../../t1.err ||
echo "w t1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/t1.fail-at:18: ed -f script-t1 && exit 255 || exit 0"
at_fn_check_prepare_trace "t1.fail-at:18"
( $at_check_trace; ed -f script-t1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/t1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_113
#AT_START_114
at_fn_group_banner 114 't2.fail-at:7' \
  "Fail: t2.err" "                                   "
at_xfail=no
(
  $as_echo "114. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-t2 <<_ATEOF_ED
H
r ../../t2.err
$(test -s ../../t2.err &&
cat ../../t2.err ||
echo "w t2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/t2.fail-at:18: ed -f script-t2 && exit 255 || exit 0"
at_fn_check_prepare_trace "t2.fail-at:18"
( $at_check_trace; ed -f script-t2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/t2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_114
#AT_START_115
at_fn_group_banner 115 'u.fail-at:7' \
  "Fail: u.err" "                                    "
at_xfail=no
(
  $as_echo "115. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-u <<_ATEOF_ED
H
r ../../u.err
$(test -s ../../u.err &&
cat ../../u.err ||
echo "w u.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/u.fail-at:18: ed -f script-u && exit 255 || exit 0"
at_fn_check_prepare_trace "u.fail-at:18"
( $at_check_trace; ed -f script-u && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/u.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_115
#AT_START_116
at_fn_group_banner 116 'w1.fail-at:7' \
  "Fail: w1.err" "                                   "
at_xfail=no
(
  $as_echo "116. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w1 <<_ATEOF_ED
H
r ../../w1.err
$(test -s ../../w1.err &&
cat ../../w1.err ||
echo "w w1.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w1.fail-at:18: ed -f script-w1 && exit 255 || exit 0"
at_fn_check_prepare_trace "w1.fail-at:18"
( $at_check_trace; ed -f script-w1 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w1.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_116
#AT_START_117
at_fn_group_banner 117 'w2.fail-at:7' \
  "Fail: w2.err" "                                   "
at_xfail=no
(
  $as_echo "117. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w2 <<_ATEOF_ED
H
r ../../w2.err
$(test -s ../../w2.err &&
cat ../../w2.err ||
echo "w w2.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w2.fail-at:18: ed -f script-w2 && exit 255 || exit 0"
at_fn_check_prepare_trace "w2.fail-at:18"
( $at_check_trace; ed -f script-w2 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w2.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_117
#AT_START_118
at_fn_group_banner 118 'w3.fail-at:7' \
  "Fail: w3.err" "                                   "
at_xfail=no
(
  $as_echo "118. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-w3 <<_ATEOF_ED
H
r ../../w3.err
$(test -s ../../w3.err &&
cat ../../w3.err ||
echo "w w3.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/w3.fail-at:18: ed -f script-w3 && exit 255 || exit 0"
at_fn_check_prepare_trace "w3.fail-at:18"
( $at_check_trace; ed -f script-w3 && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/w3.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_118
#AT_START_119
at_fn_group_banner 119 'z.fail-at:7' \
  "Fail: z.err" "                                    "
at_xfail=no
(
  $as_echo "119. $at_setup_line: testing $at_desc ..."
  $at_traceon


cat >script-z <<_ATEOF_ED
H
r ../../z.err
$(test -s ../../z.err &&
cat ../../z.err ||
echo "w z.ro")
_ATEOF_ED

{ set +x
$as_echo "$at_srcdir/z.fail-at:18: ed -f script-z && exit 255 || exit 0"
at_fn_check_prepare_trace "z.fail-at:18"
( $at_check_trace; ed -f script-z && exit 255 || exit 0
) >>"$at_stdout" 2>>"$at_stderr" 5>&-
at_status=$? at_failed=false
$at_check_filter
echo stderr:; cat "$at_stderr"
echo stdout:; cat "$at_stdout"
at_fn_check_status 0 $at_status "$at_srcdir/z.fail-at:18"
$at_failed && at_fn_log_failure
$at_traceon; }


  set +x
  $at_times_p && times >"$at_times_file"
) 5>&1 2>&1 7>&- | eval $at_tee_pipe
read at_status <"$at_status_file"
#AT_STOP_119
