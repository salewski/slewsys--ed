SUSv4: Extensions and deviations from the SUSv4 standard.

With environment variable POSIXLY_CORRECT defined, or if invoked with
commnad-line option `-G', this implementation of ed(1) scores 100% on
The Open Group Shell and Utilities Verification Suite of IEEE Std
1003.1-2017. It is the only implementation of ed(1) currently
available to do so.

However, this implementation also includes numerous extensions not
covered by the POSIX standard. The following summarizes these
extensions, as well as deviations when environment variable
POSIXLY_CORRECT is not defined and ed is not invoked with command-line
option `-G'.

* EXTENSIONS
------------

** Scrolling
   If ed is compiled with configure option `--enable-ed-scroll', then
   several commands for backward and forward scrolling are available
   as follows:

     (.)zn - Display next n lines from given address
     (.)Zn - Display previous n lines from given address
     (.)]n - Display next n / 2 lines
     (.)[n - Display previous n / 2 lines

   where n is a number which, if not specified, defaults to the
   current display height.

   Note that the half-page scrolling commands are presently only
   supported for line-oriented documents - i.e., those whose lines are
   shorter than the width of the display.

   UTF-8 multibyte characters with East Asian Ambiguous width
   attribute are displayed as narrow (i.e., occupying a single column)
   per recommendation of Unicode technical report UAX #11.

** Cut-and-Paste
   Cut-and-paste is enabled by `configure` option `--enable-ed-register`.

   It is implemented by means of `ed`'s move (`m`), copy (`t`) and
   delete (`d`) commands:

     (.,.)m>  - Move address range to unnamed register.
     (.,.)t>  - Copy address range to unnamed register.
     <m(.)    - Move unnamed register contents to after given address.
     <t(.)    - Copy unnamed register contents to after given address.

   Comparing the syntax of cut-and-paste commands with `ed`'s move and
   copy commands:

     (.,.)m(.) - Move address range to after given address.
     (.,.)t(.) - Copy address range to after given address.

   evidently the redirection operator `<` reads from the unnamed
   register and `>` writes to the unnamed register.

   Deleted lines are automatically moved to the unnamed register, so
   to cut-and-paste lines 1 through 10 to the end of buffer, one could
   use the command sequence:

     1,10d
     <m$

   Named registers are also supported: `<n' reads from register `n',
   and `>n' writes to register `n' where n is in the range 0 ... 9.
   Finally, registers can be appended to using the syntax `>>n`.

** File globbing
   If ed is compiled with the configure option `--enable-file-globbing',
   then new file commands are defined by prefixing a `~' (tilde) to
   existing ones. The new commands accept glob(3) file patterns. For
   instance, to edit files whose names begin with the letter `a', the
   command `~e a*' creates a list of matching files and opens the
   first file in the list for editing. Subsequent files in the list
   can be opened with either the edit next command: `en' or write
   current file and edit next command: `wn'. The command `~e' without
   arguments reopens the first file in the list (similar to vi(1)'s
   `:rewind'). The command `~f' prints the complete list to standard
   output.

   In order for globbing read (`~r') and write (`~w') to succeed, the
   file glob must expand uniquely to a single file. Otherwise, these
   commands fail with diagnostic "Too many file names". Furthermore,
   if no arguments are provided, both of these behave the same as
   traditional read and write commands - i.e., the current default
   file is used.

   The file commands `~E', `~e', `~f' `~r', `~W' and `~w' process file
   arguments for backslash escapes prior to expansion, i.e., any
   character preceded by `\' (backslash) is interpreted literally. If
   the first unescaped character of the file argument is exclamation
   mark (`!'), then the rest of the line is interpreted as a shell
   command. In this case, escape processing is limited to protecting
   `%' (percent sign) from being expanded into the default file name.

** External filtering
   If ed is configured with option `--enable-external-filtering', then
   it accepts commands of the form:

     (n, m)!shell-command

   where lines `n' through `m' are written to the standard input of
   `shell-command', whose standard output replaces the given lines in
   the editor buffer. For example,

     $ ed -p '*'
     *a
     hello, world
     .
     *.! tr a-z A-Z
     13
     *p
     HELLO, WORLD

** File locking
   File locking is enabled by `configure` option `--enable-file-lock`.
   Advisory locking is provided by flock (2) if available, otherwise
   fcntl (2). If help mode is enabled (command-line option `-v' or ed
   command `H'), then reading or writing a locked file prints a
   diagnostic to standard error. For historical compatibility, no
   errors are flagged.

** Macros

   Macros are enabled by `configure' option `--enable-ed-macro'. The
   command `<n@' executes the contents of register `n' as an ed script
   against the editor buffer. If `n' is not specified, then the
   temporary register is used.

   Here's an example session that loads and executes an ed script:

     $ ed -p '*'          <-- Prompt for commands with '*'.
     *r contrib/cats.ed   <-- Read in a script.
     683
     *,m>1                <-- Move it to register 1.
     *r COPYING           <-- Read in another file with lots of blank lines.
     55384
     *<1@                 <-- Run the script in register 1.
     ...
     *wq COPYING          <-- A `wq' command alone would overwrite cats.ed!
     55380                <-- Saved file is smaller by four newlines.
     $

** ED environment variable

   If ed is compiled with the configure option `--enable-ed-envar',
   then the environment variable `ED' can be used to set default
   command-line options. For example, adding to one's profile

     export ED="-vp *"

   would be helpful while learning ed.

   The environment variables COLUMNS and LINES are used, if available, to
   set the default window dimensions.

** Binary files
   When a file containing at least one ASCII NUL character is written,
   a newline is not appended if it did not already contain one upon
   reading. In particular, reading /dev/null prior to writing prevents
   appending a newline to a binary file (since /dev/null contains no
   newline).

   For example, to create a file with ed containing a single NUL
   character:

     $ ed -p '*'
     *a
     ^@
     .
     *r /dev/null
     0
     *wq junk
     1
     $

   Similarly, to remove a newline from the end of a 1k binary file
   `bin':

     $ ed -p '*' bin
     1024
     *r /dev/null
     *wq
     1023
     $

** BSD dialect
   BSD dialect has been implemented wherever it does not conflict
   with the SUSv4 standard. This includes the following commands:

     * `s' (i.e., s[n][rgp]*) to repeat a previous substitution,

     * `W' for appending text to an existing file,

     * `wq' for exiting after a write,

     * `z' for scrolling through the buffer, and

     * BSD line-addressing syntax - i.e., `^' as synonym for `+' and
     `%' as synonym for `1,$'.

** Global search
   The SUSv4 interactive global commands `G' and `V' are extended to
   support multiple commands, including `a', `i' and `c'. The command
   format is the same as for the global commands `g' and `v', i.e., one
   command per line with each line, except for the last, ending in `\'
   (backslash).

** Piped input
   For backwards compatibility, errors in piped scripts do not force ed
   to exit. SUSv4 only specifies ed's response for input via regular
   files (including here documents) or standard input.

** SunOS dialect
   For SunOS ed(1) compatibility, ed runs in restricted mode if
   invoked as red. This limits editing of files in the local directory
   only and prohibits shell commands.

* DEVIATIONS
------------

** Pattern delimiters
   To support the BSD `s' command (see EXTENSIONS above), substitution
   patterns cannot be delimited by numbers or the characters `r', `g'
   and `p'. In contrast, SUSv4 specifies that any character other than
   space or newline can used as a delimiter.

** Undo within global command
   Since the behavior of `u' (undo) within a `g' (global) command list
   is not specified by SUSv4, ed follows the behavior of the SunOS ed:
   undo forces a global command list to be executed only once, rather
   than for each line matching a global pattern. In addtion, each
   instance of `u' within a global command undoes all previous commands
   (including undo's) in the command list. This seems the best way,
   since the alternatives are either too complicated to implement or
   too confusing to use.

** Move within global command
   The `m' (move) command within a `g' command list also follows the
   SunOS ed implementation: any moved lines are removed from the global
   command's `active' list.

** Shell command arguments
   If ed is invoked with a name argument prefixed by `!' (exclamation
   mark), then the remainder of the argument is interpreted as a shell
   command. To protect the command from interpretation by the shell, it
   should be quoted. For example,

     $ ed -p '*' '!echo "hello, world"'
     12
     *,p
     hello world
     *

   In the previous example, note that the default file name is not set, i.e.,

     *f
     *

* EXAMPLES
----------

** Repeated Substitution Modifiers

   | Sequence | Result | Notes                              |
   |----------+--------+------------------------------------|
   | s;a;x    |        | Repeat substitution command        |
   | s;b;y    |        | (`s') always repeats most          |
   | s        | s;b;y  | recent substitution.               |
   |----------+--------+------------------------------------|
   | s;a;x    |        | Intermediate search commands do    |
   | /b       |        | not effect regular expression of   |
   | s        | s;a;x  | repeat substitution command ('s'). |
   |----------+--------+------------------------------------|
   | s;a;x    |        | Repeat substitution with regexp    |
   | /b       |        | modifier (`r') uses most recent    |
   | sr       | s;b;x  | regexp (of intermediate search).   |
   |----------+--------+------------------------------------|
   | /a       |        | Repeat substitution with regexp    |
   | s;b;x    | s;b;x  | modifier (`r') uses most recent    |
   | sr       | s;b;x  | regexp (of last substitution).     |
   |----------+--------+------------------------------------|
   | s;a;x    |        | Regexp modifier (`r') picks up     |
   | s;b;%    | s;b;x  | regexp from last-specified regexp  |
   | /c       |        | (search `/c'), not from repeat     |
   | s        | s;b;x  | substitution command (`s').        |
   | sr       | s;c;x  | Modifier effect preserved by       |
   | s        | s;c;x  | subsequent repeat substitution.    |


   | Sequence  | Result    | Notes                   |
   |-----------+-----------+-------------------------|
   | s;a;x;g   |           | Toggling effect of      |
   | s         | s;a;x;g   | global modifier (`g')   |
   | sg        | s;a;x;    | on repeat substitution  |
   | sg        | s;a;x;g   | command (`s').          |
   |-----------+-----------+-------------------------|
   | s;a;x;2   |           | Overriding effect of    |
   | s         | s;a;x;2   | numeric match selection |
   | s3        | s;a;x;3   | modifier (`3').         |
   |-----------+-----------+-------------------------|
   | s;a;x;2g  |           | Global toggle (`g')     |
   | sg        | s;a;x;2   | and numeric             |
   | sg        | s;a;x;2g  | selection modifiers     |
   | s3        | s;a;x;3g  | (`3') operate           |
   | s4g       | s;a;x;4   | independently of        |
   | sg        | s;a;x;4g  | each other.             |
   |-----------+-----------+-------------------------|
   | s;a;x;4g3 |           | Global modulus (`g3')   |
   | sg        | s;a;x;4   | is also toggled by      |
   | sg        | s;a;x;4g3 | global modifier, but    |
   | sg2       | s;a;x;4g2 | overridden by new       |
   | s3        | s;a;x;3g2 | global modulus (`g2').  |
   |-----------+-----------+-------------------------|
   | s;a;x;gl  |           | Print suffix (`l')      |
   | sp        | s;a;x;g   | is toggled by print     |
   | sp        | s;a;x;gl  | modifier (`p').         |


--------------------------------------------------------------------------------
