SUSv3: Deviations of the ed line editor from the SUSv3 standard.

Last modified: 2011-04-14 <alm@slewsys.org>

ed(1) is not strictly compliant with Open Group's SUSv3, 2004
standard (aka IEEE POSIX Std 1003.1). The following summarizes
omissions, extensions and deviations with respect to this standard.

* EXTENSIONS
------------

** Binary files
  When a file containing at least one ASCII NUL character is written,
  a newline is not appended if it did not already contain one upon
  reading. In particular, reading /dev/null prior to writing prevents
  appending a newline to a binary file (since /dev/null contains no
  newline).

  For example, to create a file with ed containing a single NUL
  character:

    $ ed -p '*'
    *a
    ^@
    .
    *r /dev/null
    0
    *wq junk
    1
    $

  Similarly, to remove a newline from the end of a 1k binary file
  `bin':

    $ ed -p '*' bin
    1024
    *r /dev/null
    *wq
    1023
    $

** BSD dialect
  BSD dialect has been implemented wherever it does not conflict
  with the SUSv3 standard. This includes the following commands:

    * `s' (i.e., s[n][rgp]*) to repeat a previous substitution,

    * `W' for appending text to an existing file,

    * `wq' for exiting after a write,

    * `z' for scrolling through the buffer, and

    * BSD line-addressing syntax - i.e., `^' as synonym for `+' and
    `%' as synonym for `1,$'.

** Command-line switches
  ed accepts the following command-line switches:

  -f, --file=SCRIPT         Read commands from file SCRIPT.
  -G, --traditional         Enable backward compatibility.
  -h, --help                Dispaly (this) help, then exit.
  -p, --prompt=STRING       Prompt for commands with STRING.
  -R, --ansi-color          Enable support for ANSI color codes.
  -E, -r, --regexp-extended Enable extended regular expression syntax.
  -s, --script              Suppress interactive diagnostics.
  -v, --verbose             Enable verbose error diagnostics.
  -V, --version             Print version information, then exit.
SUSv3 
** Global search
  The SUSv3 interactive global commands `G' and `V' are extended to
  support multiple commands, including `a', `i' and `c'. The command
  format is the same as for the global commands `g' and `v', i.e., one
  command per line with each line, except for the last, ending in `\'
  (backslash).

** File globbing
   If ed is compiled with the configure option
   `--enable-file-globbing', then new file commands are defined by
   adding a `~' (tilde) suffix to existing ones. The new commands
   accept glob(3) file patterns. For instance, to edit files whose
   names begin with the letter `a', the command `e~ a*' opens the
   first file in the list generated by glob(3) for editing. To edit
   the next (previous) file in the list, use `en' (`ep') without
   arguments. The command `e~' without arguments edits the first file
   in the list (similar to vi(1)'s `:rewind'). The command `f~' prints
   the complete list to standard output.
   
** File operations
  The file commands `E~', `e~', `f~' `r~', `W~' and `w~' process a
  FILE arguments for backslash escapes prior to expansion via glob(3);
  i.e., any character preceded by `\' (backslash) is interpreted
  literally. If the first unescaped character of FILE is `!'
  (exclamation mark), then the rest of the line is interpreted as a
  shell command. In this case, escape processing is limited to
  protecting `%' (percent sign) from being expanded into the default
  file name.

** File locking
   This version of ed supports advisory locking via flock (2) if
   available, otherwise fcntl (2). If ed is compiled with the
   configure option `--enable-file-lock', then reading or writing a
   locked file interactively and in verbose mode (`-v' option) prints
   a diagnostic to standard error. In the interest of historical
   compatibility, no errors are flagged.

** External filtering
   If ed is compiled with the configure option `--enable-external-filtering',
   then the filter command behaves like that of ex(1). Its syntax is:

     (n, m)!shell-command

   where `shell-command' reads as input lines `n' through `m', which
   are then replaced by the output of `shell-command'. For example,

     $ ed -p '*'
     *a
     hello, world
     .
     *.! tr a-z A-Z
     13
     *p
     HELLO, WORLD

** Environment variables
   If ed is compiled with the configure option `--enable-ed-envar',
   then the environment variable `ED' may be used to set default command-line
   switches.

   The environment variables COLUMNS and LINES are used, if available, to
   set the default window dimensions.

** Piped input
  For backwards compatibility, errors in piped scripts do not force ed
  to exit. SUSv3 only specifies ed's response for input via regular
  files (including here documents) or standard input.

** Scrolling
  The command `Z' displays the context of current line. Its syntax:
  (.) Z [n], where `n' is window size.

** SunOS dialect
  For SunOS ed(1) compatibility, ed runs in restricted mode if
  invoked as red. This limits editing of files in the local directory
  only and prohibits shell commands.

* DEVIATIONS
------------

** Pattern delimiters
  To support the BSD `s' command (see EXTENSIONS above), substitution
  patterns cannot be delimited by numbers or the characters `r', `g'
  and `p'. In contrast, SUSv3 specifies that any character other than
  space or newline can used as a delimiter.

** Undo within global command
  Since the behavior of `u' (undo) within a `g' (global) command list
  is not specified by SUSv3, ed follows the behavior of the SunOS ed:
  undo forces a global command list to be executed only once, rather
  than for each line matching a global pattern. In addtion, each
  instance of `u' within a global command undoes all previous commands
  (including undo's) in the command list. This seems the best way,
  since the alternatives are either too complicated to implement or
  too confusing to use.

** Move within global command
  The `m' (move) command within a `g' command list also follows the
  SunOS ed implementation: any moved lines are removed from the global
  command's `active' list.

** Shell command arguments
  If ed is invoked with a name argument prefixed by `!' (exclamation
  mark), then the remainder of the argument is interpreted as a shell
  command. To protect the command from interpretation by the shell, it
  should be quoted. For example,

    $ ed -p '*' '!echo "hello, world"'
    12
    *,p
    hello world
    *

  In the previous example, note that the default file name is not set, i.e.,

    *f
    *




* EXAMPLES
----------

** Repeated Substitution Modifiers


 | Sequence | Result | Notes                              |
 |----------+--------+------------------------------------|
 | s;a;x    |        | Repeat substitution command        |
 | s;b;y    |        | (`s') always repeats most          |
 | s        | s;b;y  | recent substitution.               |
 |----------+--------+------------------------------------|
 | s;a;x    |        | Intermediate search commands do    |
 | /b       |        | not effect regular expression of   |
 | s        | s;a;x  | repeat substitution command ('s'). |
 |----------+--------+------------------------------------|
 | s;a;x    |        | Repeat substitution with regexp    |
 | /b       |        | modifier (`r') uses most recent    |
 | sr       | s;b;x  | regexp (of intermediate search).   |
 |----------+--------+------------------------------------|
 | /a       |        | Repeat substitution with regexp    |
 | s;b;x    | s;b;x  | modifier (`r') uses most recent    |
 | sr       | s;b;x  | regexp (of last substitution).     |
 |----------+--------+------------------------------------|
 | s;a;x    |        | Regexp modifier (`r') picks up     |
 | s;b;%    | s;b;x  | regexp from last-specified regexp  |
 | /c       |        | (search `/c'), not from repeat     |
 | s        | s;b;x  | substitution command (`s').        |
 | sr       | s;c;x  | Modifier effect preserved by       |
 | s        | s;c;x  | subsequent repeat substitution.    |


 | Sequence  | Result    | Notes                   |
 |-----------+-----------+-------------------------|
 | s;a;x;g   |           | Toggling effect of      |
 | s         | s;a;x;g   | global modifier (`g')   |
 | sg        | s;a;x;    | on repeat substitution  |
 | sg        | s;a;x;g   | command (`s').          |
 |-----------+-----------+-------------------------|
 | s;a;x;2   |           | Overriding effect of    |
 | s         | s;a;x;2   | numeric match selection |
 | s3        | s;a;x;3   | modifier (`3').         |
 |-----------+-----------+-------------------------|
 | s;a;x;2g  |           | Global toggle (`g')     |
 | sg        | s;a;x;2   | and numeric             |
 | sg        | s;a;x;2g  | selection modifiers     |
 | s3        | s;a;x;3g  | (`3') operate           |
 | s4g       | s;a;x;4   | independently of        |
 | sg        | s;a;x;4g  | each other.             |
 |-----------+-----------+-------------------------|
 | s;a;x;4g3 |           | Global modulus (`g3')   |
 | sg        | s;a;x;4   | is also toggled by      |
 | sg        | s;a;x;4g3 | global modifier, but    |
 | sg2       | s;a;x;4g2 | overridden by new       |
 | s3        | s;a;x;3g2 | global modulus (`g2').  |
 |-----------+-----------+-------------------------|
 | s;a;x;gl  |           | Print suffix (`l')      |
 | sp        | s;a;x;g   | is toggled by print     |
 | sp        | s;a;x;gl  | modifier (`p').         |


--------------------------------------------------------------------------------

# Local variables:
# mode: org
# eval: (add-hook 'write-file-functions 'time-stamp)
# time-stamp-start: "Last modified: "
# time-stamp-format: "%:y-%02m-%02d <%u@%h>"
# time-stamp-end: "$"
# End:

