.TH ED 1 "11 August 2007"
.SH NAME
\fBed\fR, \fBred\fR \- text editor
.SH SYNOPSIS
\fBed\fR [\fB-\fR] [\fB-EGhrsvV\fR]  [\fB-f\fR \fIscript\fR] [\fB-p\fR \fIstring\fR] [\fIfile\fR]
.LP
\fBred\fR [\fB-\fR] [\fB-EGhrsvV\fR]  [\fB-f\fR \fIscript\fR] [\fB-p\fR \fIstring\fR] [\fIfile\fR]
.SH DESCRIPTION
.B Ed
is a line-oriented text editor.
It is used to create, display, modify and
otherwise manipulate text files.
When invoked as
.B red ,
the editor is
.I restricted
to editing only regular files in the working directory.

If invoked with a
.I file
argument, then a copy of
.I file
is read into the editor's buffer.
Changes are made to this copy and not directly to
.I file
itself.
Upon quitting
.BR ed ,
any changes not explicitly saved  with a
.B w
command are lost.

Editing is done in two distinct modes:
.I command
and
.IR input .
When first invoked,
.B ed
is in command mode.
In this mode commands are read from the standard input and
executed to manipulate the contents of the editor buffer.
A typical command might look like:
.sp
.RS
.BI ,s/ old / new /g
.RE
.sp
which replaces all occurences of the string
.I old
with
.IR new .

When an input command, such as
.B a
(append),
.B i
(insert) or
.B c
(change), is given,
.B ed
enters input mode.
This is the primary means of adding text to a file.
In this mode, no commands are available;
instead, the standard input is written directly to
the editor buffer.
A
.I line
consists of text up to and including a
.IR newline
(aka end-of-line) character.
Input mode is terminated by entering a single period
(\fB.\fR)
on a line.

All
.B ed
commands operate on whole lines or ranges of lines; e.g.,
the
.B d
command deletes lines; the
.B m
command moves lines, and so on.
It is possible to modify only part of a line
by means of replacement, as in the example above.
However even here, the
.B s
command is applied to whole lines at a time.

In general,
.B ed
commands consist of zero or more line addresses,
followed by a single character command and
possibly additional parameters; i.e.,
commands have the structure:
.sp
.RS
.BI [ address [, address ]] command [ parameters ]
.RE
.sp
The
.IR address (es)
indicate the line or range of lines
to be affected by
.IR command .
If fewer addresses are given than
.I command
accepts, then default addresses are supplied.
.SS OPTIONS
The following command-line options are recognized:
.TP 8
.B \-E
Enable extended regular expression syntax. By default,
.B ed
interprets patterns using basic regular expression syntax.
.TP 8
.BI \-f \ script
Read editing commands from file
.I script
instead of standard input.
Implies
.BR \-s .
.TP 8
.B -G
Enable backward compatibility.
.TP 8
.B -h
Display help, then exit.
.TP 8
.BI \-p \ string
Prompt for commands with
.IR string .
The prompt can be toggled on and off with the
.B P
command.
.TP 8
.B -r
Enable extended regular expression syntax. By default,
.B ed
interprets patterns using basic regular expression syntax.
.TP 8
.B -s
Suppresses interactive diagnostics. Use this option if
.BR ed 's
standard input is from a script.
.TP 8
.B -v
Enable verbose error diagnostics.
Verbose mode can be toggled on and off with the
.B H
command.
.TP 8
.B -V
Print version information, then exit.
.TP 8
.I file
If
.I file
is given, open it for editing.
If
.I file
is prefixed with
.B !
(exclamation mark), then execute the (string)
.I file
as a shell command,
and read its standard output for editing.
See
.BR sh (1).
To open a file whose name begins with
.B ! ,
prefix the name with a path separator.
.SS LINE ADDRESSING
A
.I line address
is an expression which
represents a line number in the buffer.
.B ed
maintains a
.I current address
which is typically supplied to commands as the default address when
none is specified.
When a file is first read,
the current address is set to the last line of the file.
In general, the current address is
set to the last line affected by a command.

A line address is constructed from
one of the expressions in the list below,
optionally followed by a numeric offset.
The offset may include any combination of digits, operators (i.e.,
.BR + ,
.B -
and
.BR ^ )
and whitespace.
Addresses are read from left to right,
and their values are computed relative to the current address.

One exception to the rule that
addresses represent line numbers is the address
.B 0
(zero).
This means "before the first line,"
and is legal wherever it makes sense.

An
.I address range
is two addresses separated either by a
.B ,
(comma) or
.B ;
(semicolon).
The value of the first address in a range
cannot exceed the value of the second.
Each address in a comma-delimited range is
interpreted relative to the current address.
In a semicolon-delimited range,
the semicolon acts as an operator which sets the current
address to the address immediately preceding the semicolon.
Subsequent addresses are interpreted
relative to the new current address.

If only the first address in a range is given,
then the second address is set to the given address.
If only the second address in a comma-delimited range is given,
then the first address is set to
.BR 1 .
If only the second address in a semicolon-delimited range is given,
then the first address is set to the current address.

If an
.IR n -tuple
of addresses is given where
.IR n\  >\ \2,
then the corresponding (two-address) range is
set to the last two addresses
after evaluating each address of the
.IR n -tuple
in sequence.
If only one address is expected, then the last address is used.
Intermediate addresses can be negative or exceed the last address in
the buffer as long as the resulting address range is valid.

The following expressions can be used to form an address:
.TP 8
.B \&.
The current line (address) in the buffer.
.TP 8
.B $
The last line in the buffer.
.TP 8
.I n
The
.IR n th,
line in the buffer
where
.I n
is a number in the interval [0,\fB$\fR].
.TP 8
.BR -\  or\  ^
The previous line.
This is equivalent to
.BR -1 .
.TP 8
\fB-\fIn\fR\  or\  \fB^\fIn\fR
The
.IR n th
previous line, where
.I n
is a non-negative number.
.TP 8
.B +
The
next line.
This is equivalent to
.BR +1 .
.TP 8
\fB+\fIn\fR\  or\  \fIwhitespace\fR\  \fIn\fR
The
.IR n th
next line, where
.I n
is a non-negative number.
.I Whitespace
followed by a number
.I n
is interpreted as
.IR +n .
.TP 8
.BR \&, " or " \&%
The first through last lines in the buffer.  This is equivalent to
the address range
.BR 1,$ .
.TP 8
.B ;
The current through last lines in the buffer.  This is equivalent to
the address range
.BR .,$ .
.TP 8
.BI / re /
The
next line containing the regular expression
.IR re .
The search wraps to the beginning of the buffer and continues down to the
current line, if necessary.
// repeats the last search.
.TP 8
.BI ? re ?
The
previous line containing the regular expression
.IR re .
The search wraps to the end of the buffer and continues up to the
current line, if necessary.
.B ??
repeats the last search.
.TP 8
.BI ' lc
The
line previously marked by a
.B k
(mark) command, where
.I lc
is a lower case letter.
.SS BASIC REGULAR EXPRESSIONS
.I Regular expressions
are patterns used in selecting text.
For example, the
.B ed
command:
.sp
.RS
.BI g/ string /
.RE
.sp
prints all lines containing
.IR string .
Regular expressions are also
used by the
.B s
command for selecting old text to be replaced with new.

In addition to a specifying string literals, regular expressions can
represent
classes of strings.  Strings thus represented are said to be matched
by the corresponding regular expression.
If it is possible for a regular expression
to match several strings in a line, then the left-most longest match is
the one selected.

The following patterns can be used in basic regular expressions (BREs):
.TP 8
.B \&.
Matches any single character except for
.IR newline .
Compare to definition of
.B .
in
.B LINE ADDRESSING
(above).
.TP 8
.I c
Any character
.IR c ,
expect for
.BR \&. ,
.BR \&* ,
.BR \&[ ,
.BR \&^ ,
.BR \&$ ,
and
.BR \e ,
matches itself.
.TP 8
\fB\e\fIc\fR
Any
.B \e
(backslash) escaped character,
.IR c ,
except for
.BR { ,
.BR } ,
.B (
and
.B )
matches itself.
.TP 8
.BI [ char-class ]
Matches any single character in the string
.IR char-class .
Two characters joined by a
.B -
(hyphen), represent a range.
For example, the regular expression
.B [0-9]
is equivalent to
.BR [0123456789] .
If
.B -
appears as either the first or last character of
.IR char-class ,
then it matches itself.
To include a
.B ]
(right square bracket), it must be the first character.
All other characters in
.I char-class
match themselves.

The following literal expressions can also be used in
.I char-class
to specify sets of characters:
.sp
.nf
\ \ \ \ \fB[:alnum:]\fR\ \ \fB[:cntrl:]\fR\ \ \fB[:lower:]\fR\ \ \fB[:space:]\fR
.PD 0
\ \ \ \ \fB[:alpha:]\fR\ \ \fB[:digit:]\fR\ \ \fB[:print:]\fR\ \ \fB[:upper:]\fR
.PD 0
\ \ \ \ \fB[:blank:]\fR\ \ \fB[:graph:]\fR\ \ \fB[:punct:]\fR\ \ \fB[:xdigit:]\fR
.fi
.sp
Patterns in
.I char-class
of the form:
.sp
\ \ \ \ \fB[.\fIcol-elm\fB.]\fR
.sp
where
.I col-elm
is a
.I collating element
(a multibyte character, for example),
are interpreted according to
the current locale settings
and match a single localized character,
which may be used as the endpoint of a character range.

Patterns in
.I char-class
of the form:
.sp
\ \ \ \ \fB[=\fIcol-elm\fB=]\fR
.sp
represent an
.I  equivalence class
of similar characters.
For example, the equivalence class
.B [=a=]
in a Latin locale matches all accented variations of the letter
.BR a .

See
.BR regex (3)
for further explanation of these constructs.

.TP 8
.BI [^ char-class ]
Matches any single character, except for
.IR newline ,
not in
.I char-class
(as defined above).

.TP 8
.B ^
If
.B ^
is the first character of a regular expression,
then it anchors the regular expression to the beginning of a line.
Otherwise, it matches itself.
Compare to definition of
.B ^
in
.B LINE ADDRESSING
(above).

.TP 8
.B $
If
.B $
is the last character of a regular expression,
then it anchors the regular expression to the end of a line.
Otherwise, it matches itself.
Compare to definition of
.B $
in
.B LINE ADDRESSING
(above).

.TP 8
.BI \e( re \e)
Defines a (possibly null) subexpression
.IR re .
A subsequent backreference of the form \fB\e\fIn\fR, where
.I n
is a number in the interval [1,9],
expands to the text matched by the
.IR n th
subexpression.
For example, the regular expression
.B \e(a.c\e)\e1
matches the string
.BR abcabc ,
but not
.BR abcadc .
Subexpressions may be nested and
are ordered relative to their left delimiter.

.TP 8
.B *
Matches the single character regular expression or subexpression
immediately preceding it zero or more times.
To match at least once, repeat the pattern before applying
.BR * .
For example, the regular expression

\ \ \ \ \fB[[:digit:]][[:digit:]]*\e\&(\e.[[:digit:]][[:digit:]]*\e\&)*\fR

matches a decimal number with at least one integral digit.
To match a literal
.BR * ,
use the expression
.BR \e* .

.TP 8
\fB\e{\fIn\fB,\fIm\fB\e}\fR or \fB\e{\fIn\fB,\e}\fR or \fB\e{\fIn\fB\e}\fR
Matches the single character regular expression or subexpression
immediately preceding it at least
.I n
and at most
.I m
times.
If
.I m
is omitted, then it matches at least
.I n
times.
If the comma is omitted as well,
then it matches exactly
.I n
times.
The previous example for matching a decimal number can now be
written more precisely as

\ \ \ \ \fB[[:digit:]]\e{1,\e}\e(\e.[[:digit:]]\e{0,\e}\e)\e{0,1\e}\fR

It is illegal for
any of these forms to occur first in
a regular expression or subexpression.
.LP

.SS EXTENDED REGULAR EXPRESSIONS
If
.B ed
is invoked with either the
.BR -E\  or\  -r
option, then patterns are expected in
.I extended regular expression
(ERE)
format, which adds
three new operators to
BRE's:

\ \ \ \ \fB? +\fR and \fB|\fR

Only the
.B |
(vertical bar) operator has no
BRE
equivalent. It allows searching for
one of multiple patterns concurrently. For example,

\ \ \ \ \fBg/\fIstring1\fB|\fIstring2\fB/\fR

prints all lines matching either
.I string1
or
.IR string2 .

The major difference in syntax between
BRE's
and
ERE's
is that
ERE
operators denoting subexpressions and repetitions
are not prefixed with
.BR \e .
For example, the
BRE
.B ed\e(it \e)\e{2\e}
is equivalent to the
ERE
\fBed(it ){2}\fR.

ERE's
are easy to understand in terms of their differences
with
BRE's
as follows.

.TP 8
.B .
See
BRE
definition.

.TP 8
.I c
See
BRE
definition.
Additional operators specific to
ERE's
are
.BR + ,
.BR \&? ,
.BR \&( ,
.B {
and
.BR | .

.TP 8
.BI \e c
Any
.B \e
(backslash) -escaped character,
.IR c ,
matches itself.
Compare with
BRE
definition.

.TP 8
\fB[\fIchar-class\fB]\fR
See
BRE
definition.

.TP 8
\fB[^\fIchar-class\fB]\fR
See
BRE
definition.

.TP 8
.B ^
See
BRE
definition.

.TP 8
.B $
See
BRE
definition.

.TP 8
.BI ( re )
See corresponding
.BI \e( re \e)
BRE
definition.

.TP 8
.B *
See
BRE
definition.

.TP 8
\fB{\fIn\fB,\fIm\fB}\fR or \fB{\fIn\fB,}\fR or \fB{\fIn\fB}\fR
See corresponding
\fB\e{\fIn\fB,\fIm\fB\e}\fR
BRE
definition.

.TP 8
.B ?
Equivalent to
.BR {0,1} .

.TP 8
.B +
Equivalent to
.BR {1,} .

.TP 8
.B |
Separates alternative patterns within a regular expression.

.SS COMMANDS
All
.B ed
commands are single characters, though some require additional parameters.
If a command's parameters extend over several lines, then
each line except for the last
must be terminated with a backslash (\e).

In general, at most one command is allowed per line.
However, most commands accept a print suffix, which is any of
.B p
(print),
.B l
(list) ,
or
.B n
(enumerate),
to print the last line affected by the command.

An interrupt (typically ^C) has the effect of aborting the current command
and returning the editor to command mode.

.B ed
recognizes the following commands.  The commands are shown together with
the default address or address range supplied if none is
specified (in parenthesis).

.TP 8
(.)a
Appends text to the buffer after the addressed line, which may be the
address 0 (zero).  Text is entered in input mode.  The current address is
set to last line entered.

.TP 8
(.,.)c
Changes lines in the buffer.  The addressed lines are deleted
from the buffer, and text is appended in their place.
Text is entered in input mode.
The current address is set to last line entered.

.TP 8
(.,.)d
Deletes the addressed lines from the buffer.
If there is a line after the deleted range, then the current address is set
to this line. Otherwise the current address is set to the line
before the deleted range.

.TP 8
.RI e \ file
Edits
.IR file ,
and sets the default filename.
If
.I file
is not specified, then the  default filename is used.
Any lines in the buffer are deleted before
the new file is read.
The current address is set to the last line read.

.TP 8
\fBe !\fIcommand\fR
Edits the standard output of
\fB!\fIcommand\fR,
(see
.BI ! command
below).
The default filename is unchanged.
Any lines in the buffer are deleted before the output of
.I command
is read.
The current address is set to the last line read.

.TP 8
.BI E \ file
Edits
.I file
unconditionally.
This is similar to the
.B e
command,
except that unwritten changes are discarded without warning.
The current address is set to the last line read.

.TP 8
.BI f \ file
Sets the default filename to
.IR file .
If
.I file
is not specified, then the default unescaped filename is printed.

.TP 8
.BI (1,$)g /re/command-list
Applies
.I command-list
to each of the addressed lines matching a regular expression
.IR re .
The current address is set to the
line currently matched before
.I command-list
is executed.
At the end of the
.B g
command, the current address is set to the last line affected by
.IR command-list .

Each command in
.I command-list
must be on a separate line,
and every line except for the last must be terminated by a backslash
(\e).
Any commands are allowed, except for
.BR g ,
.BR G ,
.BR v ,
and
.BR V .
A newline alone in
.I command-list
is equivalent to a
.B p
command.

.TP 8
.RI (1,$)G /re/
Interactively edits the addressed lines matching a regular expression
.IR re.
For each matching line,
the line is printed,
the current address is set,
and the user is prompted to enter a
.IR command-list .
At the end of the
.B G
command, the current address
is set to the last line affected by (the last)
.IR command-list .

The format of
.I command-list
is the same as that of the
.B g
command.  A newline alone acts as a null command list.
A single \fB&\fR repeats the last non-null command list.

.TP 8
H
Toggles the printing of error explanations.
By default, explanations are not printed.
It is recommended that ed scripts begin with this command to
aid in debugging.

.TP 8
h
Prints an explanation of the last error.

.TP 8
(.)i
Inserts text in the buffer before the current line.
Text is entered in input mode.
The current address is set to the last line entered.

.TP 8
(.,.+1)j
Joins the addressed lines.  The addressed lines are
deleted from the buffer and replaced by a single
line containing their joined text.
The current address is set to the resultant line.

.TP 8
.RI (.)k lc
Marks a line with a lower case letter
.IR lc .
The  line can then be addressed as
.I 'lc
(i.e., a single quote followed by
.I lc
) in subsequent commands.  The mark is not cleared until the line is
deleted or otherwise modified.

.TP 8
(.,.)l
Prints the addressed lines unambiguously.  If invoked from a terminal,
.B ed
pauses at the end of each page until a newline is entered.
The current address is set to the last line printed.

.TP 8
(.,.)m(.)
Moves lines in the buffer.  The addressed lines are moved to after the
right-hand destination address, which may be the address
.IR 0
(zero).
The current address is set to the
last line moved.

.TP 8
(.,.)n
Prints the addressed lines along with
their line numbers.  The current address is set to the last line
printed.

.TP 8
(.,.)p
Prints the addressed lines.    If invoked from a terminal,
.B ed
pauses at the end of each page until a newline is entered.
The current address is set to the last line
printed.

.TP 8
P
Toggles the command prompt on and off.
Unless a prompt was specified by with command-line option
\fI-p string\fR, the command prompt is by default turned off.

.TP 8
q
Quits ed.

.TP 8
Q
Quits ed unconditionally.
This is similar to the
.I q
command,
except that unwritten changes are discarded without warning.

.TP 8
.RI ($)r \ file
Reads
.I file
to after the addressed line.  If
.I file
is not specified, then the default
filename is used.  If there was no default filename prior to the command,
then the default filename is set to
.IR file .
Otherwise, the default filename is unchanged.
The current address is set to the last line read.

.TP 8
($)r !\fIcommand\fR
Reads
to after the addressed line
the standard output of
.IR `!command' ,
(see the
.RI ! command
below).
The default filename is unchanged.
The current address is set to the last line read.

.HP
.RI (.,.)s /re/replacement/
.HP
.RI (.,.)s  /re/replacement/\fRg\fR
.HP
.RI (.,.)s  /re/replacement/n
.br
Replaces text in the addressed lines
matching a regular expression
.I re
with
.IR replacement .
By default, only the first match in each line is replaced.
If the
.B g
(global) suffix is given, then every match to be replaced.
The
.B n
suffix, where
.I n
is a positive number, causes only the
.IR n th
match to be replaced.
It is an error if no substitutions are performed on any of the addressed
lines.
The current address is set the last line affected.

.I re
and
.I replacement
may be delimited by any character other than space and newline
(see the
.B s
command below).
If one or two of the last delimiters is omitted, then the last line
affected is printed as though the print suffix
.B p
were specified.


An unescaped \fB&\fR in
.I replacement
is replaced by the currently matched text.
The character sequence
\fB\e\fIm\fR,
where
.I m
is a number in the range
.RB [ 1 , 9 ],
is replaced by the
.IR m th
backreference expression of the matched text.
If
.I replacement
consists of a single \fB%\fR, then
.I replacement
from the last substitution is used.
Newlines may be embedded in
.I replacement
if they are escaped with a backslash (\e).

.TP 8
(.,.)s
Repeats the last substitution.
This form of the
.B s
command accepts a count suffix
.IR n ,
or any combination of the characters
.BR r ,
.BR g ,
and
.BR p .
If a count suffix
.I n
is given, then only the
.IR n th
match is replaced.
The
.B r
suffix causes
the regular expression of the last search to be used instead of the
that of the last substitution.
The
.B g
suffix toggles the global suffix of the last substitution.
The
.B p
suffix toggles the print suffix of the last substitution.
The current address is set to the last line affected.

.TP 8
(.,.)t(.)
Copies (i.e., transfers) the addressed lines to after the right-hand
destination address, which may be the address
.IR 0
(zero).
The current address is set to the last line
copied.

.TP 8
u
Undoes the last command and restores the current address
to what it was before the command.
The global commands
.BR g ,
.BR G ,
.BR v ,
and
.BR V .
are treated as a single command by undo.
.B u
is its own inverse.

.TP 8
.RI (1,$)v /re/command-list
Applies
.I command-list
to each of the addressed lines not matching a regular expression
.IR re .
This is similar to the
.B g
command.

.TP 8
.RI (1,$)V /re/
Interactively edits the addressed lines not matching a regular expression
.IR re.
This is similar to the
.B G
command.

.TP 8
.RI (1,$)w \ file
Writes the addressed lines to
.IR file .
Any previous contents of
.I file
is lost without warning.
If there is no default filename, then the default filename is set to
.IR file,
otherwise it is unchanged.  If no filename is specified, then the default
filename is used.
The current address is unchanged.

.TP 8
.RI (1,$)wq \ file
Writes the addressed lines to
.IR file ,
and then executes a
.B q
command.

.TP 8
(1,$)w !\fIcommand\fR
Writes the addressed lines to the standard input of
.IR `!command' ,
(see the
.RI ! command
below).
The default filename and current address are unchanged.

.TP 8
.RI (1,$)W \ file
Appends the addressed lines to the end of
.IR file .
This is similar to the
.B w
command, expect that the previous contents of file is not clobbered.
The current address is unchanged.

.TP 8
(.)x
Copies (puts) the contents of the cut buffer to after the addressed line.
The current address is set to the last line copied.

.TP 8
(.,.)y
Copies (yanks) the addressed lines to the cut buffer.
The cut buffer is overwritten by subsequent
.BR y ,
.BR s ,
.BR j ,
.BR d ,
or
.B c
commands.
The current address is unchanged.

.TP 8
.RI (.+1)z n
Scrolls
.I n
lines at a time starting at addressed line.  If
.I n
is not specified, then the current window size is used.
The current address is set to the last line printed.

.TP 8
.RI ! command
Executes
.I command
via
.IR sh (1).
If the first character of
.I command
is
.BR ! ,
then it is replaced by text of the
previous
.IR `!command' .
.B ed
does not process
.I command
for backslash (\e) escapes.
However, an unescaped
.B %
is replaced by the default filename.
When the shell returns from execution, a `!'
is printed to the standard output.
The current line is unchanged.

.TP 8
(.,.)#
Begins a comment;  the rest of the line, up to a newline, is ignored.
If a line address followed by a semicolon is given, then the
current address is set to that address.  Otherwise, the current address
is unchanged.

.TP 8
($)=
Prints the line number of the addressed line.

.TP 8
(.+1)newline
Prints the addressed line, and sets the current address to
that line.

.SH FILES
.TP 20
/tmp/ed.*
Buffer file
.PD 0
.TP 20
ed.hup
The file to which
.B ed
attempts to write the  buffer if the terminal hangs up.

.SH SEE ALSO

.BR vi (1),
.BR sed (1),
.BR regex (3),
.BR sh (1).

USD:12-13

B. W. Kernighan and P. J. Plauger,
.I Software Tools in Pascal ,
Addison-Wesley, 1981.

.SH LIMITATIONS
.B ed
processes
.I file
arguments for backslash escapes, i.e.,  in a filename,
any characters preceded by a backslash (\e) are
interpreted literally.

If a text (non-binary) file is not terminated by a newline character,
then
.B ed
appends one on reading/writing it.  In the case of a binary file,
.B ed
does not append a newline on reading/writing.

per line overhead: 4 ints

.SH DIAGNOSTICS
When an error occurs,
if
.BR ed 's
input is from a regular file or here document, then it
exits, otherwise it
prints a `?' and returns to command mode.
An explanation of the last error can be
printed with the
.I `h'
(help) command.

Attempting to quit
.B ed
or edit another file before writing a modified buffer
results in an error.
If the command is entered a second time, it succeeds,
but any changes to the buffer are lost.

.B ed
exits with 0 if no errors occurred; otherwise >0.
