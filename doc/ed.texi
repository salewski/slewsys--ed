\input texinfo

@c %**start of header
@setfilename ed.info
@settitle The Ed Text Editor
@kbdinputstyle code
@ifnottex
@paragraphindent none
@end ifnottex
@finalout
@c %**end of header

@include version.texi

@set PROGRAM-VERSION @value{VERSION}

@dircategory Text creation and manipulation
@direntry
* ed: (ed).                    The Standard Unix Text Editor
@end direntry

@copying
@verbatim
Copyright Â© 1993-2013 Andrew L. Moore <slewsys@gmail.com>, SlewSys Research
@end verbatim
@*
@*
@emph{A Tutorial Introduction  to the Unix Text Editor}
and
@*
@emph{Advanced Editing on UNIX}
@*
Copyright @copyright{} Brian W. Kernighan, Lucent Laboratories
@*
Reprinted courtesy of Lucent Laboratories
@*
@*
@end copying

@setchapternewpage on

@titlepage
@title Ed
@subtitle The Standard Unix Text Editor
@subtitle Updated for @command{Ed} Version @value{PROGRAM-VERSION}
@author Andrew L. Moore
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@headings double
@c @fonttextsize 10

@ifnottex

@node Top, Overview, (dir), (dir)
@top The @command{Ed} Text Editor

This manual is intended to serve as both tutorial and reference for
@command{ed}, the ``standard Unix text editor'',
version @value{VERSION}. Of historical interest is that @command{ed} was the
original Unix text editor and introduced the ``regular expression''
method of representing text patterns.

@end ifnottex

@menu
* Overview::              Overview of the @command{ed} text editor.
* Tutorial::              Tutorial introduction to @command{ed}.
* Switches::              Invoking @command{ed} from the command line.
* Line Addressing::       Specifying lines in the buffer.
* Regular Expressions::   Patterns for searching text.
* Extended Expressions::  Advanced patterns for searching text.
* Command Reference::     @command{Ed} Command Reference.
* Environment::           Environment variables affecting @command{ed}.
* Limitations::           Internal limits of @command{ed}.
* Error Handling::        Error handling, diagnostics and  exit status.

@end menu


@node Overview, Tutorial, Top, Top
@chapter @command{Ed}: Modal, Line-Oriented Text Editor

@command{Ed} is a ``modal, line-oriented text editor''.

@command{Ed} is a @dfn{text editor}, .i.e., a utility for creating,
displaying, modifying and otherwise manipulating text files.
@command{red} is @command{ed} restricted: only files in the current
directory can be edited and shell access is prohibited.

If invoked with argument @var{file}, then a copy of @var{file} is read
from disk into a region of memory called the @dfn{editor buffer}.
Edits are made to this buffer and not directly to @var{file} itself.
Any changes can be saved by explicitly writing the editor buffer
back to disk with a @kbd{w} (@dfn{write}) command. Upon quiting
@command{ed}, unsaved changes are lost.

@command{Ed} is @dfn{modal}, i.e., editing is done in two distinct
modes: @dfn{command} and @dfn{input}. When first invoked, @command{ed}
is in command mode. In this mode commands are read from the standard
input and executed to manipulate the contents of the editor buffer. A
typical command might look like:

@example
,s/@var{old}/@var{new}/g
@end example

which replaces all occurrences of the string @var{old} with @var{new}.

When an input command, such as @kbd{a} (append), @kbd{i} (insert) or
@kbd{c} (change), is given, @command{ed} enters input mode. In this
mode, no commands are available; instead, @command{ed} reads lines of
text from the standard input and places them into the editor buffer. A
@dfn{line} consists of text up to and including a @key{RET} character.
Input mode is terminated by entering a single period (@kbd{.}) on a
line.

@command{Ed} is @dfn{line-oriented}, i.e., all @command{ed}
commands operate on whole lines or ranges of lines; e.g., the @kbd{d}
command deletes lines; the @kbd{m} command moves lines, and so on. It
is possible to modify only a portion of a line by means of
replacement, as in the example above. However even here, the @kbd{s}
command is applied to whole lines at a time.

In general, @command{ed} commands consist of zero or more line
addresses, followed by a single character command and possibly
additional parameters; i.e., commands have the structure:

@example
[@var{address} [,@var{address}]]@var{command}[@var{parameters}]
@end example

The @var{address}es indicate the line or range of lines to be affected
by the command. If fewer addresses are given than the command accepts,
then default addresses are used.


@node Tutorial, Switches, Overview, Top
@chapter Introduction to Line Editing

@command{Ed} was created in 1969 by Ken Thompson as part of the
original Unix system and is essentially unchanged today. The pattern
matching syntax which @command{ed} introduced, and even some of its
command syntax, is now standard across many applications and
programming languages. Its consistency and general availabiliy across
platforms make @command{ed} a natural springboard to learning the Unix
system. Brian W. Kernighan's original @command{ed} tutorials
are as relevant today as when they were written circa 1970. They are
reprinted here courtesy of Lucent Laboratories.

@menu
* A Tutorial Introduction to the UNIX Text Editor::
* Advanced Editing on UNIX::
@end menu

@ifnottex

@node A Tutorial Introduction to the UNIX Text Editor, Advanced Editing on UNIX, Tutorial, Tutorial
@majorheading A Tutorial Introduction to the UNIX Text Editor

by Brian W. Kernighan

@include ed-intro-incl.texi

@node Advanced Editing on UNIX,, A Tutorial Introduction to the UNIX Text Editor, Tutorial
@majorheading Advanced Editing on UNIX

by Brian W. Kernighan

@lowersections
@include ed-adv-incl.texi
@raisesections

@end ifnottex

@node Switches, Line Addressing, Tutorial, Top
@chapter Command-Line Options for Invoking Ed


@example
ed [@var{option}@dots{}] [@var{file}]
@end example

@noindent
Options:

@table @code
@item -f, --file=@var{script}
Read editing commands from file @var{script} instead of standard
input. Implies @code{-s}.

@item -G, --traditional
Enable backward compatibility with historical versions of @command{ed}.

@item -h, --help
Display help, then exit.

@item -p, --prompt=@var{string}
Prompt for commands with @var{string}.  The prompt can be toggled on
and off with the @kbd{P} command.

@item -r, --regexp-extended
Enable extended regular expression syntax. By default, @command{ed}
interprets patterns using basic regular expression syntax.

@item -s, --script
Suppress interactive diagnostics. Use this option if
@command{ed}'s standard input is from a script.

@item -v, --verbose
Enable verbose error diagnostics. Verbose mode can be toggled on and
off with the @code{H} command.

@item -V, --version
Print version information, then exit.

@end table

If @var{file} is given, open it for editing. If @var{file} is prefixed
with @samp{!} (exclamation point), then execute the (string)
@var{file} as shell command, and read its standard output for editing
(see @cite{sh(1)}). To open a file whose name begins with a @samp{!},
prefix the name with @kbd{\} (backslash).

@node Line Addressing, Regular Expressions, Switches, Top
@chapter Addressing Lines in the Buffer

An @dfn{address} represents the number of a line in the buffer.
@command{Ed} maintains a @dfn{current address} which is typically
supplied to commands as the default address when none is specified.
When a file is first read, the current address is set to the last line
of the file. In general, the current address is set to the last line
affected by a command.

A line address is constructed from one of the bases in the list below,
optionally followed by a numeric offset. The offset may include any
combination of digits, operators (i.e., @kbd{+}, @kbd{-} and @kbd{^})
and whitespace. Addresses are read from left to right, and their
values are computed relative to the current address.

One exception to the rule that addresses represent line numbers is the
address @kbd{0} (zero). This means ``before the first line,'' and is
legal wherever it makes sense.

An @dfn{address range} is two addresses separated by either a @kbd{,}
(comma) or @kbd{;} (semicolon). The value of the first address in a
range cannot exceed the value of the the second. Each address in a
comma-delimited range is interpreted relative to the current address.
In a semicolon-delimited range, the semicolon acts as an operator
which sets the current address to the address immediately preceding
the semicolon. Subsequent addresses are interpreted relative to the
new current address.

 If only the first address in a range is given, then the second
address is set to the given address. If only the second address in a
comma-delimited range is given, then the first address is set to 1. If
only the second address in a semicolon-delimited range is given, then
the first address is set to the current address.

If an @var{n}-tuple of addresses is given where @var{n} > 2, then the
corresponding (two-address) range is set to the last two addresses
after evaluating each address of the @var{n}-tuple in sequence. If
only one address is expected, then the last address is used.

The following address symbols are recognized.

@table @code

@item .
The current line (address) in the buffer.

@item $
The last line in the buffer.

@item @var{n}
The @var{n}th, line in the buffer where @var{n} is a number in the range
@kbd{0,$}.

@item -
@itemx ^
The previous line. This is equivalent to @kbd{-1} and may be repeated
with cumulative effect.

@item -@var{n}
@itemx ^@var{n}
The @var{n}th previous line, where @var{n} is a non-negative number.

@item +
The next line. This is equivalent to @kbd{+1} and may be repeated with
cumulative effect.

@item +@var{n}
@itemx @var{whitespace} @var{n}
The @var{n}th next line, where @var{n} is a non-negative number.
Whitespace followed by a number @var{n} is interpreted as
@kbd{+@var{n}}.

@item ,
@itemx %
The first through last lines in the buffer. This is equivalent to the
address range @kbd{1,$}.

@item ;
The current through last lines in the buffer. This is equivalent to
the address range @kbd{.,$}.

@item /@var{re}/
The next line containing the regular expression @var{re}. The search
wraps to the beginning of the buffer and continues down to the current
line, if necessary. @kbd{//} repeats the last search.

@item ?@var{re}?
The previous line containing the regular expression @var{re}. The
search wraps to the end of the buffer and continues up to the current
line, if necessary. @kbd{??} repeats the last search.

@item '@var{lc}
The line previously marked by a @kbd{k} (mark) command, where @var{lc}
is a lower case letter.

@end table

@node Regular Expressions, Extended Expressions, Line Addressing, Top
@chapter Basic Regular Expressions: Searching for Text

@dfn{Regular expressions} are patterns used in selecting text.  For example,
the @command{ed} command:

@example
g/@var{string}/
@end example

@noindent
prints all lines containing @var{string}. Regular expressions are also
used by the @kbd{s} command for selecting old text to be replaced with
new.

In addition to a specifying string literals, regular expressions can
represent classes of strings. Strings thus represented are said to be
matched by the corresponding regular expression. If it is possible for
a regular expression to match several strings in a line, then the
left-most longest match is the one selected.

The following symbols can be used in constructing @dfn{basic regular expressions}
(BREs):

@table @code

@item @var{c}
Any character @var{c}, except for @kbd{.}, @kbd{*}, @kbd{[}, @kbd{^},
@kbd{$} and @kbd{\}, matches itself.

@item \@var{c}
Any backslash-escaped character @var{c}, except for @kbd{@{},
@kbd{@}}, @kbd{(}, @kbd{)}, matches itself. See also the discussion
about @cite{GNU Regex} below.

@item .
Matches any single character except @emph{end-of-line}.

@item [@var{char-class}]
Matches any single character in @var{char-class} except
@emph{end-of-line}. To include a @kbd{]} in @var{char-class}, it must
be the first character. A range of characters can be specified by
separating the end characters of the range with a @kbd{-}, e.g.,
@kbd{a-z} specifies the lower case characters. If @kbd{-} appears as
the first or last character of @var{char-class}, then it matches
itself. All other characters in @var{char-class} match themselves.

The following literal expressions can also be used in @var{char-class}
to specify sets of characters:

@example
[:alnum:] [:cntrl:] [:lower:] [:space:]
[:alpha:] [:digit:] [:print:] [:upper:]
[:blank:] [:graph:] [:punct:] [:xdigit:]
@end example

Patterns in
@var{char-class}
of the form:
@example
[.@var{col-elm}.]
[=@var{col-elm}=]
@end example

@noindent
where @var{col-elm} is a @dfn{collating element} are interpreted
according to @code{locale (5)}. See @code{regex (3)} for an
explanation of these constructs.

@item [^@var{char-class}]
Matches any single character, except @emph{end-of-line}, not in
@var{char-class}. @var{char-class} is defined as above.

@item ^
If @kbd{^} is the first character of a regular expression, then it
anchors the regular expression to the beginning of a line. Otherwise,
it matches itself.

@item $
If @kbd{$} is the last character of a regular expression, it anchors
the regular expression to the end of a line. Otherwise, it matches
itself.

@item \(@var{re}\)
Defines a (possibly null) subexpression @var{re}. Subexpressions may
be nested. A subsequent backreference of the form \@kbd{@var{n}},
where @var{n} is a number in the interval [1,9], expands to the text
matched by the @var{n}th subexpression. For example, the regular
expression @kbd{\(a.c\)\1} matches the string @samp{abcabc}, but not
@samp{abcadc}. Subexpressions are ordered relative to their left
delimiter.

@item *
Matches the single character regular expression or subexpression
immediately preceding it zero or more times. If @kbd{*} (asterisk) is
the first character of a regular expression or subexpression, then it
matches itself. Patterns constructed with the @kbd{*} operator can
produce unexpected null matches. For instance, the regular expression
@kbd{b*} matches the (null string at the) beginning of @samp{abbb}, as
opposed to the substring @samp{bbb}, since a null match is the only
left-most match.

@item \@{@var{n},@var{m}\@}
@itemx \@{@var{n},\@}
@itemx \@{@var{n}\@}
Matches the single character regular expression or subexpression
immediately preceding it at least @var{n} and at most @var{m} times.
If @var{m} is omitted, then it matches at least @var{n} times. If the
comma is also omitted, then it matches exactly @var{n} times.

@end table

If @command{ed} is linked against the GNU regular expression library,
then the following non-standard regular expression operators are
available.

@table @code

@item  \`
@itemx \'
Unconditionally matches the beginning @kbd{\`} or ending @kbd{\'} of a line.

@item \?
Optionally matches the single character regular expression or
subexpression immediately preceding it. For example, the regular
expression @kbd{a[bd]\?c} matches the strings @samp{abc}, @samp{adc}
and @samp{ac}. If @kbd{\?} occurs at the beginning of a regular
expressions or subexpression, then it matches a literal @kbd{?}.

@item \+
Matches the single character regular expression or subexpression
immediately preceding it one or more times. So the regular expression
@kbd{a+} is shorthand for @kbd{aa*}. If @kbd{\+} occurs at the
beginning of a regular expression or subexpression, then it matches a
literal @kbd{+}.

@item \b
Matches the (null string at the) beginning or ending of a word.

@item \B
Matches (a null string) inside a word.

@item \<
Matches the (null string at the) beginning of a word.

@item \>
Matches the (null string at the) end of a word.

@item \w
Matches any character in a word.

@item \W
Matches any character not in a word.

@item \|
Logical @emph{OR} of regular expressions. It matches if any one of
several alternative expressions matches. If more than one match is
found, then the longest match is selected. For example, the regular
expression @kbd{a\(xx\|yy\|zz\)b} matches each of the strings
@samp{axxb}, @samp{ayyb} and @samp{azzb}.

@end table

@node Extended Expressions, Command Reference, Regular Expressions, Top
@chapter Extended Regular Expressions: Advanced Text Search

If @command{ed} is invoked with either @option{-r} (GNU) or
@option{-E} (BSD) option, then patterns are interpreted according to
@dfn{extended regular expression} (ERE) syntax, which adds three new
operators to BREs:

@example
? + and |.
@end example

@noindent
Of these, only the @kbd{|} (read @emph{alternation}) operator has no
BRE equivalent. It separates multiple patterns which are tested in
sequence until a match is found. For example,

@example
g/@var{stringa}|@var{stringb}/
@end example

@noindent
prints all lines containing either @var{stringa} or @var{stringb}.

EREs are constructed from the same symbols as BREs with the following
exceptions:

@table @code

@item @var{c}
Any character @var{c}, except for @kbd{.}, @kbd{?}, @kbd{*}, @kbd{+},
@kbd{[}, @kbd{^}, @kbd{$}, @kbd{|} and @kbd{\}, matches itself.

@item \@var{c}
Any backslash-escaped character @var{c}, matches itself. See also the
discussion about @cite{GNU Regex} in @ref{Regular Expressions}.

@item ?
Equivalent to the BRE @kbd{\@{0,1\@}} --- see @ref{Regular Expressions}.

@item +
Equivalent to the BRE @kbd{\@{1,\@}} --- see @ref{Regular Expressions}.

@item |
Logical @emph{OR} of regular expressions. It matches if any one of
several alternative expressions matches. If more than one match is
found, then the longest match is selected.

@item (@var{re})
Equivalent to the BRE @kbd{\(@var{re}\)} --- see @ref{Regular Expressions}.

@item @{@var{n},@var{m}@}
@itemx @{@var{n},@}
@itemx @{@var{n}@}
Equivalent to the BREs @kbd{\@{@var{n},@var{m}\@}},
@kbd{\@{@var{n},\@}} and
@kbd{\@{@var{n}\@}}, respectively --- see @ref{Regular Expressions}.

@end table

@node Command Reference, Environment, Extended Expressions, Top
@chapter @command{Ed} Command Reference

All @command{ed} commands are single characters, though some require
additonal parameters. If a command's parameters extend over several
lines, then each line except for the last must be terminated with a
backslash (@kbd{\}).

In general, at most one command is allowed per line. However, most
commands accept a print suffix, which is any of @kbd{p} (print),
@kbd{l} (list), or @kbd{n} (enumerate), to print the last line
affected by the command.

An interrupt (typically @key{C-c}) has the effect of aborting the
current command and returning the editor to command mode.

@command{ed} recognizes the following commands. The commands are shown
together with the default address or address range supplied if none is
specified (in parenthesis).

@table @code

@item (.)a
Appends text to the buffer after the addressed line, which may be the
address @kbd{0} (zero). Text is entered in input mode. The current
address is set to last line entered.

@item (.,.)c
Changes lines in the buffer. The addressed lines are deleted from the
buffer, and text is appended in their place. Text is entered in input
mode. The current address is set to last line entered.

@item (.,.)d
Deletes the addressed lines from the buffer. If there is a line after
the deleted range, then the current address is set to this line.
Otherwise the current address is set to the line before the deleted
range.

@item e @var{file}
Edits @var{file}, and sets the default filename. If @var{file} is not
specified, then the default filename is used. Any lines in the buffer
are deleted before the new file is read. The current address is set to
the last line read.

@item e !@var{command}
Edits the standard output of @kbd{!@var{command}}, (see the @kbd{!}
command below). The default filename is unchanged. Any lines in the
buffer are deleted before the output of @var{command} is read. The
current address is set to the last line read.

@item E @var{file}
Edits @var{file} unconditionally. This is similar to the @kbd{e}
command, except that unwritten changes are discarded without warning.
The current address is set to the last line read.

@item f @var{file}
Sets the default filename to @var{file}. If @var{file} is not
specified, then the default unescaped filename is printed.

@item (1,$)g/@var{re}/@var{command-list}
Applies @var{command-list} to each of the addressed lines matching a
regular expression @var{re}. The current address is set to the line
currently matched before @var{command-list} is executed. At the end of
the @kbd{g} command, the current address is set to the last line
affected by @var{command-list}.

Each command in @var{command-list} must be on a separate line, and
every line except for the last must be terminated by a @kbd{\}
(backslash). Any commands are allowed, except for @kbd{g}, @kbd{G},
@kbd{v}, and @kbd{V}. By default, a null command in @var{command-list}
is equivalent to a @kbd{p} command.

@item (1,$)G/@var{re}/
Interactively edits the addressed lines matching a regular expression
@var{re}. For each matching line, the line is printed, the current
address is set, and the user is prompted to enter a
@var{command-list}. At the end of the @kbd{G} command, the current
address is set to the last line affected by (the last)
@var{command-list}.

The format of @var{command-list} is the same as that of the @kbd{g}
command. A single @kbd{&} repeats the last non-null command list.

@item H
Toggles the printing of error explanations. By default, explanations
are not printed. It is recommended that ed scripts begin with this
command to aid in debugging.

@item h
Prints an explanation of the last error.

@item (.)i
Inserts text in the buffer before the current line. Text is entered in
input mode. The current address is set to the last line entered.

@item (.,.+1)j
Joins the addressed lines. The addressed lines are deleted from the
buffer and replaced by a single line containing their joined text. The
current address is set to the resultant line.

@item (.)k@var{lc}
Marks a line with a lower case letter @var{lc}. The line can then be
addressed as @kbd{'@var{lc}} (i.e., a single quote followed by
@var{lc}) in subsequent commands. The mark is not cleared until the
line is deleted or otherwise modified.

@item (.,.)l
Prints the addressed lines unambiguously. If invoked from a terminal,
@command{ed} pauses at the end of each page until a @key{RET} is
entered. The current address is set to the last line printed.

@item (.,.)m(.)
Moves lines in the buffer. The addressed lines are moved to after the
right-hand destination address, which may be the address @kbd{0}
(zero). The current address is set to the last line moved.

@item (.,.)n
Prints the addressed lines along with their line numbers. The current
address is set to the last line printed.

@item (.,.)p
Prints the addressed lines. The current address is set to the last
line printed.

@item P
Toggles the command prompt on and off. Unless a prompt is specified
with command-line option @option{-p @var{prompt}}, the command prompt
is by default turned off.

@item q
Quits @command{ed}.

@item Q
Quits @command{ed} unconditionally. This is similar to the @code{q}
command, except that unwritten changes are discarded without warning.

@item ($)r @var{file}
Reads @var{file} to after the addressed line. If @var{file} is not
specified, then the default filename is used. If there is no default
filename prior to the command, then the default filename is set to
@var{file}. Otherwise, the default filename is unchanged. The current
address is set to the last line read.

@item ($)r !@var{command}
Reads to after the addressed line the standard output of
@kbd{!@var{command}}, (see the @kbd{!} command below). The default
filename is unchanged. The current address is set to the last line
read.

@item (.,.)s/@var{re}/@var{replacement}/
@itemx (.,.)s/@var{re}/@var{replacement}/g
@itemx (.,.)s/@var{re}/@var{replacement}/n
Replaces text in the addressed lines matching a regular expression
@var{re} with @var{replacement}. By default, only the first match in
each line is replaced. If the @kbd{g} (global) suffix is given, then
every match to be replaced. The @kbd{n} suffix, where @var{n} is a
postive number, causes only the @var{n}th match to be replaced. It is
an error if no substitutions are performed on any of the addressed
lines. The current address is set the last line affected.

@var{re} and @var{replacement} may be delimited by any character other
than @key{SPC} and @key{RET} (see the @kbd{s} command below). If one
or two of the last delimiters is omitted, then the last line affected
is printed as though the print suffix @kbd{p} were specified.

An unescaped @kbd{&} in @var{replacement} is replaced by the currently
matched text. The character sequence @kbd{@var{m}} where @var{m} is a
number in the range [1,9], is replaced by the @var{m}th backreference
expression of the matched text. If @var{replacement} consists of a
single @kbd{%}, then @var{replacement} from the last substitution is
used. An @emph{end-of-line} character can be embedded in
@var{replacement} if they are escaped with a backslash (@kbd{\}).

@item (.,.)s
Repeats the last substitution. This form of the @kbd{s} command
accepts a count suffix @var{n}, or any combination of the characters
@kbd{r}, @kbd{g}, and @kbd{p}. If a count suffix @var{n} is given,
then only the @var{n}th match is replaced. The @kbd{r} suffix causes
the regular expression of the last search to be used instead of the
that of the last substitution. The @kbd{g} suffix toggles the global
suffix of the last substitution. The @kbd{p} suffix toggles the print
suffix of the last substitution The current address is set to the last
line affected.

@item (.,.)t(.)
Copies (i.e., transfers) the addressed lines to after the right-hand
destination address, which may be the address @kbd{0} (zero).  The
current address is set to the last line copied.

@item u
Undoes the last command and restores the current address to what it was
before the command.  The global commands @kbd{g}, @kbd{G}, @kbd{v},
and @kbd{V} are treated as a single command by undo.  @kbd{u} is its
own inverse.

@item (1,$)v/@var{re}/@var{command-list}
Applies @var{command-list} to each of the addressed lines not matching a
regular expression @var{re}.  This is similar to the @kbd{g} command.

@item (1,$)V/@var{re}/
Interactively edits the addressed lines not matching a regular
expression @var{re}.  This is similar to the @kbd{G} command.

@item (1,$)w @var{file}
Writes the addressed lines to @var{file}.  Any previous contents of
@var{file} is lost without warning.  If there is no default filename,
then the default filename is set to @var{file}, otherwise it is
unchanged.  If no filename is specified, then the default filename is
used.  The current address is unchanged.

@item (1,$)wq @var{file}
Writes the addressed lines to @var{file}, and then executes a @kbd{q}
command.

@item (1,$)w !@var{command}
Writes the addressed lines to the standard input of
@kbd{!@var{command}}, (see the @kbd{!} command below). The default
filename and current address are unchanged.

@item (1,$)W @var{file}
Appends the addressed lines to the end of @var{file}. This is similar
to the @kbd{w} command, expect that the previous contents of file is
not clobbered. The current address is unchanged.

@item (.+1)z @var{n}
Scrolls @var{n} lines at a time starting at addressed line. If @var{n}
is not specified, then the current window size is used. The current
address is set to the last line printed.

@item ! @var{command}
Executes @var{command} via @cite{sh(1)}. If the first character of
@var{command} is @kbd{!}, then it is replaced by text of the previous
@kbd{!@var{command}}. @command{ed} does not process @var{command} for
backslash (@kbd{\}) escapes. However, an unescaped @kbd{%} is replaced
by the default filename. When the shell returns from execution, a
@kbd{!} is printed to the standard output. The current line is
unchanged.

@item (.,.)#
Begins a comment; the rest of the line, up to @emph{end-of-line}, is
ignored. If a line address followed by a semicolon is given, then the
current address is set to that address. Otherwise, the current address
is unchanged.

@item ($)=
Prints the line number of the addressed line.

@item (.+1) @key{RET}
Prints the addressed line, and sets the current address to that line.

@end table

@node Environment, Limitations, Command Reference, Top
@comment  node-name,  next,  previous,  up
@chapter Environment Variables Affecting Ed

@command{Ed} recognizes the following environment variables:

@table @env

@item COLUMNS
Screen width is initialized to value of @env{COLUMNS}

@item ED
If so configured, the @command{ed} argument list is initialized with
the value of the @env{ED} environment variable. This option presents a
security risk since @command{ED} can be set to execute arbitrary
commands whenever @command{ed} is run.

@item HOME
User's home directory.

@item LINES
Screen height.

@item POSIXLY_CORRECT
If defined, do

@item TMP

@end table

@node Limitations, Error Handling, Environment, Top
@comment  node-name,  next,  previous,  up
@chapter Limits of @command{Ed}

The buffer files are kept in @file{/tmp/ed.*}. If the terminal hangs
up, @command{ed} attempts to write the buffer to file @file{ed.hup}.

@command{ed} processes @var{file} arguments for backslash escapes,
i.e., in a filename, any characters preceded by a @kbd{\} (backslash)
are interpreted literally.

If a text (non-binary) file is not terminated by an @emph{end-of-line}
character, then @command{ed} appends one on reading/writing it. In the
case of a binary file, @command{ed} does not append an
@emph{end-of-line} on reading/writing.

Per line overhead: 4 @code{int}s.

@node Error Handling,  , Limitations, Top
@chapter Error Handling and Exit Status

When an error occurs, if @command{ed}'s input is from a regular file
or here document, then it exits, otherwise it prints a @kbd{?} and
returns to command mode. An explanation of the last error can be
printed with the @kbd{h} (help) command.

@noindent
If the @kbd{u} (undo) command occurs in a global command list, then
the command list is executed only once.

Attempting to quit @command{ed} or edit another file before writing a
modified buffer results in an error. If the command is entered a
second time, it succeeds, but any changes to the buffer are lost.

@command{ed} exits with 0 if no errors occurred; otherwise >0.

@bye
